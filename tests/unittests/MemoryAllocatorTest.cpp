/**
 * Copyright (c) Glow Contributors. See CONTRIBUTORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#include "glow/CodeGen/MemoryAllocator.h"

#include "gtest/gtest.h"

using namespace glow;

TEST(MemAlloc, simple) {
  MemoryAllocator MA("test", 1000);
  void *handle = reinterpret_cast<void *>(1);

  // Can't allocate huge chunks.
  EXPECT_EQ(MA.allocate(100000, handle), MemoryAllocator::npos);

  // First chunk needs to start at zero.
  EXPECT_EQ(MA.allocate(500, handle), 0);

  // Second chunk must not be zero.
  EXPECT_NE(MA.allocate(500, handle), 0);
}

TEST(MemAlloc, holes) {
  MemoryAllocator MA("test", 1000);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  void *handle4 = reinterpret_cast<void *>(4);

  MA.allocate(10, handle0);
  auto p1 = MA.allocate(10, handle1);
  MA.allocate(10, handle2);

  MA.deallocate(handle1);
  auto maxMemoryUsageBefore = MA.getMaxMemoryUsage();
  auto p4 = MA.allocate(10, handle4);
  auto maxMemoryUsageAfter = MA.getMaxMemoryUsage();

  // Check that p4 was allocated on top of the freed p1.
  EXPECT_EQ(p4, p1);
  // Max memory usage should not be affected, as a hole was found and used.
  EXPECT_EQ(maxMemoryUsageBefore, maxMemoryUsageAfter);

  MA.deallocate(handle0);
  MA.deallocate(handle2);
}

/// Check some properties of the first-fit allocation strategy.
TEST(MemAlloc, firstFitAllocation) {
  MemoryAllocator MA("test", 1000);
  void *handle = reinterpret_cast<void *>(10000);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  void *handle3 = reinterpret_cast<void *>(3);
  void *handle4 = reinterpret_cast<void *>(4);

  // Allocate three blocks of sizes 30, 20 and 10 and allocate blocks of size 5
  // between them.
  auto p0 = MA.allocate(30, handle0);
  MA.allocate(5, handle);
  MA.allocate(20, handle1);
  MA.allocate(5, handle);
  auto p2 = MA.allocate(10, handle2);
  MA.allocate(5, handle);

  // Free blocks p0, p1 and p2.
  MA.deallocate(handle0);
  MA.deallocate(handle1);
  MA.deallocate(handle2);

  // Try to allocate a block of size 10.
  auto maxMemoryUsageBefore = MA.getMaxMemoryUsage();
  auto p3 = MA.allocate(10, handle3);
  auto maxMemoryUsageAfter = MA.getMaxMemoryUsage();

  // Check that p4 was allocated on top of the freed p0, because the allocator
  // uses the first-fit algorithm. Best-fit would have taken the block of p2.
  EXPECT_EQ(p3, p0);
  // Max memory usage should not be affected, as a hole was found and used.
  EXPECT_EQ(maxMemoryUsageBefore, maxMemoryUsageAfter);

  // Allocate 100 bytes. Since the first-fit cannot find any big enough hole
  // between allocations, the allocator would allocate this block in the free
  // space after all existing allocations.
  maxMemoryUsageBefore = MA.getMaxMemoryUsage();
  auto p4 = MA.allocate(100, handle4);
  maxMemoryUsageAfter = MA.getMaxMemoryUsage();
  EXPECT_GT(p4, p2);
  // Max memory usage should be increased.
  EXPECT_LT(maxMemoryUsageBefore, maxMemoryUsageAfter);
}

TEST(MemAlloc, dealloc) {
  MemoryAllocator MA("test", 1000);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  void *handle3 = reinterpret_cast<void *>(3);
  void *handle4 = reinterpret_cast<void *>(4);

  auto p0 = MA.allocate(10, handle0);
  auto p1 = MA.allocate(10, handle1);
  auto p2 = MA.allocate(10, handle2);
  auto p3 = MA.allocate(10, handle3);

  auto p4 = MA.allocate(10, handle4);

  EXPECT_EQ(p0, 0);
  EXPECT_NE(p1, MemoryAllocator::npos);
  EXPECT_NE(p2, MemoryAllocator::npos);
  EXPECT_NE(p3, MemoryAllocator::npos);
  EXPECT_NE(p4, MemoryAllocator::npos);

  // Deallocate in some arbitrary order.
  MA.deallocate(handle0);
  MA.deallocate(handle2);
  MA.deallocate(handle1);
  MA.deallocate(handle3);
  // Check that it is possible to deallocate using the associated handle.
  MA.deallocate(handle4);
#ifndef NDEBUG
  // Check that deallocating a non-allocated or already deallocated buffer
  // should result in an assertion failure.
  ASSERT_DEATH_IF_SUPPORTED(MA.deallocate(handle3), "Unknown handle");
#endif
  // Check that after deallocating everything we start allocating from zero.
  EXPECT_EQ(MA.allocate(10, handle0), 0);
}

TEST(MemAlloc, dealloc2) {
  MemoryAllocator MA("test", 10000);
  std::vector<uint64_t> allocations;

  for (int i = 0; i < 100; i++) {
    // Create odd-sized allocations.
    const void *handle = reinterpret_cast<void *>(i);
    auto p0 = MA.allocate(10 + i % 4, handle);
    EXPECT_TRUE(MA.hasAddress(handle));
    EXPECT_TRUE(MA.hasHandle(p0));

    EXPECT_NE(p0, MemoryAllocator::npos);
    allocations.push_back(p0);

    if (allocations.size() > 20) {
      MA.deallocate(MA.getHandle(allocations[0]));
      allocations.erase(allocations.begin());
    }
  }
  // Drain the allocator.
  while (!allocations.empty()) {
    MA.deallocate(MA.getHandle(allocations[0]));
    allocations.erase(allocations.begin());
  }

  // Check that after deallocating everything we start allocating from zero.
  const void *handle = reinterpret_cast<void *>(0);
  EXPECT_EQ(MA.allocate(10, handle), 0);
}

TEST(MemAlloc, allocateToTheMax) {
  MemoryAllocator MA("test", 128);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  auto p0 = MA.allocate(64, handle0);
  auto p1 = MA.allocate(64, handle1);

  EXPECT_EQ(p0, 0);
  EXPECT_NE(p1, MemoryAllocator::npos);

  MA.deallocate(handle0);
  MA.deallocate(handle1);

  EXPECT_EQ(MA.getMaxMemoryUsage(), 128);
}

TEST(MemAlloc, testContains) {
  MemoryAllocator MA("test", 1000);
  void *handle = reinterpret_cast<void *>(0);

  EXPECT_EQ(MA.allocate(200, handle), 0);

  // Offset 100 should be inside an allocated block.
  EXPECT_TRUE(MA.contains(100));
  // Offset 300 should not be inside an allocated block.
  EXPECT_FALSE(MA.contains(300));
}

TEST(MemAlloc, testHandles) {
  MemoryAllocator MA("test", 1000);
  // Define a set of handles to be used.
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  (void)handle2;
  void *handle3 = reinterpret_cast<void *>(3);
  // Allocate a block of memory p1, but do not associate any handle with it.
  auto p1 = MA.allocate(10, handle1);
  // Check that handle1 is associated with the allocated address p1.
  EXPECT_EQ(MA.getHandle(p1), handle1);
  // Check that the address p1 is associated with the handle handle1.
  EXPECT_EQ(MA.getAddress(handle1), p1);

  // Allocate a block of memory p3 and associate a handle handle3 with it.
  auto p3 = MA.allocate(10, handle3);
  // The associated handle of p3 should be handle3.
  EXPECT_EQ(MA.getHandle(p3), handle3);
  // The address associated with handle3 should be p3.
  EXPECT_EQ(MA.getAddress(handle3), p3);
  // Deallocate the memory.
  MA.deallocate(handle3);
  // Check that after deallocation there is no handle is associated with the
  // allocated address.
  EXPECT_FALSE(MA.hasHandle(p3));
  // Check that after deallocation there is no address is associated with
  // handle3.
  EXPECT_FALSE(MA.hasAddress(handle3));

  MA.reset();
  p1 = MA.allocate(10, handle1);
#ifndef NDEBUG
  // Deallocating handle2 should result in an assertion failure.
  ASSERT_DEATH_IF_SUPPORTED(MA.deallocate(handle2), "Unknown handle");
#endif
}

TEST(MemAlloc, testEviction) {
  MemoryAllocator MA("test", 1024);
  // Define a set of handles to be used.
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  void *handle3 = reinterpret_cast<void *>(3);
  void *handle4 = reinterpret_cast<void *>(4);
  void *handle5 = reinterpret_cast<void *>(5);
  std::vector<const void *> evicted;

  // Allocation of 500 from 1000 bytes should not trigger any eviction.
  auto p1 = MA.allocate(500, handle1, {}, evicted);
  EXPECT_NE(p1, MA.npos);
  EXPECT_TRUE(evicted.empty());

  // Allocation of 400 from remaining 500 bytes should not trigger any eviction.
  auto p2 = MA.allocate(400, handle2, {}, evicted);
  EXPECT_NE(p2, MA.npos);
  EXPECT_TRUE(evicted.empty());

  // Allocation of 400 from remaining 100 bytes should trigger the eviction.
  auto p3 = MA.allocate(400, handle3, {}, evicted);
  // The allocation should be successful.
  EXPECT_NE(p3, MA.npos);
  EXPECT_EQ(evicted.size(), 1);

  // Allocation of 2000 bytes is impossible. It should not should trigger any
  // eviction.
  evicted.clear();
  auto p4 = MA.allocate(2000, handle4, {}, evicted);
  EXPECT_EQ(p4, MA.npos);
  EXPECT_EQ(evicted.size(), 0);

  // Allocation of 1024 bytes only possible if all other allocated blocks are
  // evicted.
  evicted.clear();
  auto p5 = MA.allocate(1024, handle5, {}, evicted);
  EXPECT_NE(p5, MA.npos);
  EXPECT_EQ(evicted.size(), 2);

  // Check how eviction works with a non-empty doNotEvict set.
  MA.reset();
  evicted.clear();
  // Allocate 3 blocks, 256 bytes each.
  p1 = MA.allocate(256, handle1, {}, evicted);
  EXPECT_EQ(p1, 0);
  p2 = MA.allocate(256, handle2, {}, evicted);
  EXPECT_EQ(p2, 256);
  p3 = MA.allocate(256, handle3, {}, evicted);
  EXPECT_EQ(p3, 512);
  // No blocks should be evicted until now.
  EXPECT_EQ(evicted.size(), 0);
  // Try to allocate a block of size 512. Without a doNotEvict set and using a
  // first-fit eviction strategy, the allocator would have to evict blocks p1
  // and p2 to satisfy this request. But due to providing a doNotEvict set which
  // forbids the eviction of p1, the allocator should evict p2 and p3 and
  // allocate the 512 bytes at the same address as p2.
  std::set<const void *> doNotEvict{handle1};
  p4 = MA.allocate(512, handle4, doNotEvict, evicted);
  EXPECT_EQ(p4, p2);
  EXPECT_EQ(evicted.size(), 2);
  EXPECT_EQ(evicted[0], handle2);
  EXPECT_EQ(evicted[1], handle3);
}

TEST(MemAlloc, testGetSize) {
  MemoryAllocator MA("test", 1024);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  // Allocate two memory blocks and checks that the size of the allocated blocks
  // is reported correctly.
  MA.allocate(10, handle0);
  EXPECT_EQ(MA.getSize(handle0), 10);
  MA.allocate(200, handle1);
  EXPECT_EQ(MA.getSize(handle1), 200);
}

TEST(MemAlloc, testGetMemorySize) {
  MemoryAllocator MA1("test1", 1024);
  EXPECT_EQ(MA1.getMemorySize(), 1024);
  MemoryAllocator MA2("test1", 102);
  EXPECT_EQ(MA2.getMemorySize(), 102);
}

TEST(MemAlloc, testAlignment) {
  MemoryAllocator MA1("test1", 1024, 128);
  MemoryAllocator MA2("test2", 1024, 256);

  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);
  void *handle3 = reinterpret_cast<void *>(3);

  // Both allocators start at zero.
  auto p0 = MA1.allocate(10, handle0);
  auto p1 = MA2.allocate(10, handle1);
  EXPECT_EQ(p0, 0);
  EXPECT_EQ(p1, 0);

  // Second allocation starts at the alignment boundary.
  auto p2 = MA1.allocate(10, handle2);
  auto p3 = MA2.allocate(10, handle3);
  EXPECT_EQ(p2, 128);
  EXPECT_EQ(p3, 256);
}

/// ----------------------------------------------------------------------------
///                        Allocate all segments at once
/// ----------------------------------------------------------------------------
/// Test efficiency for allocateAll.
TEST(MemAlloc, testAllocateAllEfficiency) {

  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);
  void *handle2 = reinterpret_cast<void *>(2);

  // Simple allocate.
  MemoryAllocator MA1("test", 0, 10);
  MA1.allocate(10, handle0);
  MA1.allocate(10, handle1);
  MA1.deallocate(handle0);
  MA1.allocate(20, handle2);
  MA1.deallocate(handle1);
  MA1.deallocate(handle2);
  EXPECT_EQ(MA1.getMaxMemoryUsage(), 40);
  EXPECT_FLOAT_EQ(MA1.getAllocationEfficiency(), 0.75);

  // Allocate all.
  MemoryAllocator MA2("test", 0, 10);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle0, true, 10));
  allocList.push_back(Allocation(handle1, true, 10));
  allocList.push_back(Allocation(handle0, false, 0));
  allocList.push_back(Allocation(handle2, true, 20));
  allocList.push_back(Allocation(handle1, false, 0));
  allocList.push_back(Allocation(handle2, false, 0));
  MA2.allocateAll(allocList);
  EXPECT_EQ(MA2.getMaxMemoryUsage(), 30);
  EXPECT_FLOAT_EQ(MA2.getAllocationEfficiency(), 1.00);
}

/// Test alignment for allocateAll.
TEST(MemAlloc, testAllocateAllAlignment) {
  MemoryAllocator MA("test", 192, 64);

  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(1);

  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle0, true, 65));
  allocList.push_back(Allocation(handle1, true, 64));
  allocList.push_back(Allocation(handle0, false, 0));
  allocList.push_back(Allocation(handle1, false, 0));
  uint64_t usedSize = MA.allocateAll(allocList);

  EXPECT_EQ(usedSize, 192);
  EXPECT_EQ(MA.getSize(handle0), 128);
  EXPECT_EQ(MA.getSize(handle1), 64);
  EXPECT_EQ(MA.getAddress(handle0), 0);
  EXPECT_EQ(MA.getAddress(handle1), 128);
  EXPECT_EQ(MA.getSegment(handle0).size(), 128);
  EXPECT_EQ(MA.getSegment(handle1).size(), 64);
  EXPECT_EQ(MA.getSegment(handle0).begin_, 0);
  EXPECT_EQ(MA.getSegment(handle1).begin_, 128);
  EXPECT_EQ(MA.getMaxMemoryUsage(), 192);
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.0);
}

/// Test invalid number of allocations for allocateAll.
TEST(MemAlloc, testAllocateAllInvalidNumAllocs) {
  MemoryAllocator MA("test", 0, 64);
  void *handle = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle, true, 10));
#ifndef NDEBUG
  ASSERT_DEATH_IF_SUPPORTED(MA.allocateAll(allocList),
                            "Allocations are invalid!");
#endif
}

/// Test invalid FREE before ALLOC for allocateAll.
TEST(MemAlloc, testAllocateAllInvalidFreeBeforeAlloc) {
  MemoryAllocator MA("test", 0, 64);
  void *handle = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle, false, 0));
  allocList.push_back(Allocation(handle, true, 10));
#ifndef NDEBUG
  ASSERT_DEATH_IF_SUPPORTED(MA.allocateAll(allocList),
                            "Allocations are invalid!");
#endif
}

/// Test invalid handles for allocateAll.
TEST(MemAlloc, testAllocateAllInvalidHandles1) {
  MemoryAllocator MA("test", 0, 64);
  void *handle = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle, true, 10));
  allocList.push_back(Allocation(handle, true, 10));
  allocList.push_back(Allocation(handle, false, 0));
  allocList.push_back(Allocation(handle, false, 0));
#ifndef NDEBUG
  ASSERT_DEATH_IF_SUPPORTED(MA.allocateAll(allocList),
                            "Allocations are invalid!");
#endif
}

/// Test invalid handles for allocateAll.
TEST(MemAlloc, testAllocateAllInvalidHandles2) {
  MemoryAllocator MA("test", 0, 64);
  void *handle0 = reinterpret_cast<void *>(0);
  void *handle1 = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle0, true, 10));
  allocList.push_back(Allocation(handle0, true, 10));
  allocList.push_back(Allocation(handle1, false, 0));
  allocList.push_back(Allocation(handle1, false, 0));
#ifndef NDEBUG
  ASSERT_DEATH_IF_SUPPORTED(MA.allocateAll(allocList),
                            "Allocations are invalid!");
#endif
}

/// Test segment size 0 for allocateAll.
TEST(MemAlloc, testAllocateAllSize0) {
  MemoryAllocator MA("test", 0, 64);
  void *handle = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle, true, 0));
  allocList.push_back(Allocation(handle, false, 0));
  uint64_t usedSize = MA.allocateAll(allocList);
  EXPECT_EQ(usedSize, 0);
  EXPECT_EQ(MA.getSize(handle), 0);
}

/// Test empty allocs for allocateAll.
TEST(MemAlloc, testAllocateAllEmptyAlloc) {
  MemoryAllocator MA("test", 0, 64);
  std::list<Allocation> allocList;
  uint64_t usedSize = MA.allocateAll(allocList);
  EXPECT_EQ(usedSize, 0);
}

/// Test memory overflow for allocateAll.
TEST(MemAlloc, testAllocateAllMemOverflow) {
  MemoryAllocator MA("test", 10, 64);
  void *handle = reinterpret_cast<void *>(0);
  std::list<Allocation> allocList;
  allocList.push_back(Allocation(handle, true, 100));
  allocList.push_back(Allocation(handle, false, 0));
  uint64_t usedSize = MA.allocateAll(allocList);
  EXPECT_EQ(usedSize, MemoryAllocator::npos);
#ifndef NDEBUG
  ASSERT_DEATH_IF_SUPPORTED(MA.getSize(handle), "Unknown handle");
#endif
}

/// Test memory allocation for model cifar10_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel1) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 32768));
  allocs.push_back(Allocation(2, 1, 8192));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 8192));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2048));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 4096));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 1024));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 10));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 40));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 40960);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model gru.onnx.
TEST(MemAlloc, testAllocateAllForModel2) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1680));
  allocs.push_back(Allocation(2, 1, 3840));
  allocs.push_back(Allocation(3, 1, 384));
  allocs.push_back(Allocation(4, 1, 3840));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(5, 1, 384));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(6, 1, 384));
  allocs.push_back(Allocation(7, 1, 1512));
  allocs.push_back(Allocation(8, 1, 3456));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 384));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 384));
  allocs.push_back(Allocation(11, 1, 384));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 384));
  allocs.push_back(Allocation(13, 1, 384));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 384));
  allocs.push_back(Allocation(15, 1, 384));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 384));
  allocs.push_back(Allocation(17, 1, 384));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 384));
  allocs.push_back(Allocation(19, 1, 384));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 384));
  allocs.push_back(Allocation(21, 1, 384));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 384));
  allocs.push_back(Allocation(23, 1, 384));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 384));
  allocs.push_back(Allocation(25, 1, 384));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 384));
  allocs.push_back(Allocation(27, 1, 384));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 384));
  allocs.push_back(Allocation(29, 1, 384));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 384));
  allocs.push_back(Allocation(31, 1, 384));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 384));
  allocs.push_back(Allocation(33, 1, 384));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 384));
  allocs.push_back(Allocation(35, 1, 384));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 384));
  allocs.push_back(Allocation(37, 1, 384));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 384));
  allocs.push_back(Allocation(39, 1, 384));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 384));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(41, 1, 384));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(42, 1, 384));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(43, 1, 384));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 15360);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model inception_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel3) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 3211264));
  allocs.push_back(Allocation(2, 1, 802816));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2408448));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 602112));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 50176));
  allocs.push_back(Allocation(7, 1, 100352));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 602112));
  allocs.push_back(Allocation(9, 1, 100352));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 200704));
  allocs.push_back(Allocation(11, 1, 301056));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(12, 1, 401408));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 802816));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(14, 1, 802816));
  allocs.push_back(Allocation(15, 1, 200704));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 100352));
  allocs.push_back(Allocation(17, 1, 301056));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(20, 1, 602112));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 1505280));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(22, 1, 376320));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 12544));
  allocs.push_back(Allocation(24, 1, 37632));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 376320));
  allocs.push_back(Allocation(26, 1, 50176));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 150528));
  allocs.push_back(Allocation(28, 1, 75264));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(29, 1, 163072));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 401408));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(31, 1, 18816));
  allocs.push_back(Allocation(32, 1, 50176));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 401408));
  allocs.push_back(Allocation(34, 1, 50176));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 125440));
  allocs.push_back(Allocation(36, 1, 87808));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(37, 1, 175616));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 401408));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(39, 1, 18816));
  allocs.push_back(Allocation(40, 1, 50176));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 401408));
  allocs.push_back(Allocation(42, 1, 50176));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 100352));
  allocs.push_back(Allocation(44, 1, 100352));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(45, 1, 200704));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 1, 401408));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(47, 1, 25088));
  allocs.push_back(Allocation(48, 1, 50176));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 401408));
  allocs.push_back(Allocation(50, 1, 50176));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 87808));
  allocs.push_back(Allocation(52, 1, 112896));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(53, 1, 225792));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 413952));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(55, 1, 25088));
  allocs.push_back(Allocation(56, 1, 100352));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 413952));
  allocs.push_back(Allocation(58, 1, 100352));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 200704));
  allocs.push_back(Allocation(60, 1, 125440));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(61, 1, 250880));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(62, 1, 652288));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(63, 1, 163072));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 6272));
  allocs.push_back(Allocation(65, 1, 25088));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 163072));
  allocs.push_back(Allocation(67, 1, 25088));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 50176));
  allocs.push_back(Allocation(69, 1, 31360));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(70, 1, 62720));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(71, 1, 163072));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(72, 1, 9408));
  allocs.push_back(Allocation(73, 1, 25088));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(74, 1, 163072));
  allocs.push_back(Allocation(75, 1, 25088));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 75264));
  allocs.push_back(Allocation(77, 1, 37632));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(78, 1, 75264));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(79, 1, 200704));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(80, 1, 4096));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 4004));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(81, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4014080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model inception_v3.onnx.
TEST(MemAlloc, testAllocateAllForModel4) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2841728));
  allocs.push_back(Allocation(2, 1, 2765952));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 5531904));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1364224));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1705280));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 3871488));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 940800));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 940800));
  allocs.push_back(Allocation(9, 1, 156800));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 313600));
  allocs.push_back(Allocation(11, 1, 235200));
  allocs.push_back(Allocation(12, 1, 313600));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 313600));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(14, 1, 470400));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 470400));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 1254400));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(17, 1, 313600));
  allocs.push_back(Allocation(18, 1, 235200));
  allocs.push_back(Allocation(19, 1, 313600));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1254400));
  allocs.push_back(Allocation(21, 1, 313600));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 313600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(23, 1, 470400));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 470400));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 1411200));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(26, 1, 313600));
  allocs.push_back(Allocation(27, 1, 235200));
  allocs.push_back(Allocation(28, 1, 313600));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1411200));
  allocs.push_back(Allocation(30, 1, 313600));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 313600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(32, 1, 470400));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 470400));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 1411200));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(35, 1, 313600));
  allocs.push_back(Allocation(36, 1, 470400));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 110976));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 443904));
  allocs.push_back(Allocation(39, 1, 332928));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(40, 1, 887808));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 221952));
  allocs.push_back(Allocation(42, 1, 147968));
  allocs.push_back(Allocation(43, 1, 147968));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 221952));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 147968));
  allocs.push_back(Allocation(46, 1, 147968));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 147968));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 147968));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 221952));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 887808));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(51, 1, 221952));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 887808));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 221952));
  allocs.push_back(Allocation(54, 1, 184960));
  allocs.push_back(Allocation(55, 1, 184960));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 221952));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 184960));
  allocs.push_back(Allocation(58, 1, 184960));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 184960));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 184960));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 1, 221952));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(62, 1, 887808));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(63, 1, 221952));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 887808));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(65, 1, 221952));
  allocs.push_back(Allocation(66, 1, 184960));
  allocs.push_back(Allocation(67, 1, 184960));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 221952));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 184960));
  allocs.push_back(Allocation(70, 1, 184960));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(71, 1, 184960));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 184960));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(73, 1, 221952));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(74, 1, 887808));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(75, 1, 221952));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 887808));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(77, 1, 221952));
  allocs.push_back(Allocation(78, 1, 221952));
  allocs.push_back(Allocation(79, 1, 221952));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(80, 1, 221952));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 221952));
  allocs.push_back(Allocation(82, 1, 221952));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(83, 1, 221952));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 221952));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(85, 1, 221952));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(86, 1, 887808));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(87, 1, 221952));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(88, 1, 887808));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(89, 1, 221952));
  allocs.push_back(Allocation(90, 1, 221952));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(91, 1, 221952));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(92, 1, 49152));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(93, 1, 221952));
  allocs.push_back(Allocation(94, 1, 81920));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(95, 1, 196608));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(96, 1, 327680));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(97, 1, 327680));
  allocs.push_back(Allocation(98, 1, 49152));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 81920));
  allocs.push_back(Allocation(100, 1, 98304));
  allocs.push_back(Allocation(101, 1, 98304));
  allocs.push_back(Allocation(102, 1, 98304));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(103, 1, 114688));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(104, 1, 98304));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(105, 1, 98304));
  allocs.push_back(Allocation(106, 1, 98304));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(107, 1, 524288));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(108, 1, 524288));
  allocs.push_back(Allocation(109, 1, 49152));
  allocs.push_back(Allocation(108, 0, 0));
  allocs.push_back(Allocation(110, 1, 81920));
  allocs.push_back(Allocation(111, 1, 98304));
  allocs.push_back(Allocation(112, 1, 98304));
  allocs.push_back(Allocation(113, 1, 98304));
  allocs.push_back(Allocation(111, 0, 0));
  allocs.push_back(Allocation(114, 1, 114688));
  allocs.push_back(Allocation(107, 0, 0));
  allocs.push_back(Allocation(115, 1, 98304));
  allocs.push_back(Allocation(114, 0, 0));
  allocs.push_back(Allocation(116, 1, 98304));
  allocs.push_back(Allocation(117, 1, 98304));
  allocs.push_back(Allocation(115, 0, 0));
  allocs.push_back(Allocation(118, 1, 524288));
  allocs.push_back(Allocation(110, 0, 0));
  allocs.push_back(Allocation(112, 0, 0));
  allocs.push_back(Allocation(113, 0, 0));
  allocs.push_back(Allocation(116, 0, 0));
  allocs.push_back(Allocation(117, 0, 0));
  allocs.push_back(Allocation(109, 0, 0));
  allocs.push_back(Allocation(119, 1, 8192));
  allocs.push_back(Allocation(118, 0, 0));
  allocs.push_back(Allocation(120, 1, 4004));
  allocs.push_back(Allocation(119, 0, 0));
  allocs.push_back(Allocation(120, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8297856);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model inception_v4.onnx.
TEST(MemAlloc, testAllocateAllForModel5) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2841728));
  allocs.push_back(Allocation(2, 1, 2765952));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 5531904));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2046336));
  allocs.push_back(Allocation(5, 1, 1364224));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(6, 1, 3410560));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(7, 1, 1364224));
  allocs.push_back(Allocation(8, 1, 1935744));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 1364224));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1364224));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 1364224));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 1935744));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 3871488));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 940800));
  allocs.push_back(Allocation(15, 1, 940800));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(16, 1, 1881600));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 470400));
  allocs.push_back(Allocation(18, 1, 313600));
  allocs.push_back(Allocation(19, 1, 470400));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 313600));
  allocs.push_back(Allocation(21, 1, 470400));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 470400));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1881600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(24, 1, 470400));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 1881600));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 470400));
  allocs.push_back(Allocation(27, 1, 313600));
  allocs.push_back(Allocation(28, 1, 470400));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 313600));
  allocs.push_back(Allocation(30, 1, 470400));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 470400));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1881600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(33, 1, 470400));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 1881600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 470400));
  allocs.push_back(Allocation(36, 1, 313600));
  allocs.push_back(Allocation(37, 1, 470400));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 313600));
  allocs.push_back(Allocation(39, 1, 470400));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 470400));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 1881600));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(42, 1, 470400));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 1881600));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 470400));
  allocs.push_back(Allocation(45, 1, 313600));
  allocs.push_back(Allocation(46, 1, 470400));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 313600));
  allocs.push_back(Allocation(48, 1, 470400));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 470400));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 1881600));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(51, 1, 470400));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 1881600));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 940800));
  allocs.push_back(Allocation(54, 1, 1097600));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 295936));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 443904));
  allocs.push_back(Allocation(57, 1, 443904));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(58, 1, 1183744));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 1183744));
  allocs.push_back(Allocation(60, 1, 147968));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 1, 221952));
  allocs.push_back(Allocation(62, 1, 258944));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 295936));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 221952));
  allocs.push_back(Allocation(65, 1, 221952));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 258944));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 1, 258944));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 295936));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 443904));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(70, 1, 1183744));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(71, 1, 1183744));
  allocs.push_back(Allocation(72, 1, 147968));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(73, 1, 221952));
  allocs.push_back(Allocation(74, 1, 258944));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 295936));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 221952));
  allocs.push_back(Allocation(77, 1, 221952));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(78, 1, 258944));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(79, 1, 258944));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(80, 1, 295936));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 443904));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(82, 1, 1183744));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(83, 1, 1183744));
  allocs.push_back(Allocation(84, 1, 147968));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(85, 1, 221952));
  allocs.push_back(Allocation(86, 1, 258944));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 295936));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(88, 1, 221952));
  allocs.push_back(Allocation(89, 1, 221952));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(90, 1, 258944));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(91, 1, 258944));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(92, 1, 295936));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(93, 1, 443904));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(94, 1, 1183744));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(95, 1, 1183744));
  allocs.push_back(Allocation(96, 1, 147968));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(97, 1, 221952));
  allocs.push_back(Allocation(98, 1, 258944));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 295936));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(100, 1, 221952));
  allocs.push_back(Allocation(101, 1, 221952));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(102, 1, 258944));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(103, 1, 258944));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(104, 1, 295936));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(105, 1, 443904));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(106, 1, 1183744));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(107, 1, 1183744));
  allocs.push_back(Allocation(108, 1, 147968));
  allocs.push_back(Allocation(107, 0, 0));
  allocs.push_back(Allocation(109, 1, 221952));
  allocs.push_back(Allocation(110, 1, 258944));
  allocs.push_back(Allocation(109, 0, 0));
  allocs.push_back(Allocation(111, 1, 295936));
  allocs.push_back(Allocation(110, 0, 0));
  allocs.push_back(Allocation(112, 1, 221952));
  allocs.push_back(Allocation(113, 1, 221952));
  allocs.push_back(Allocation(112, 0, 0));
  allocs.push_back(Allocation(114, 1, 258944));
  allocs.push_back(Allocation(113, 0, 0));
  allocs.push_back(Allocation(115, 1, 258944));
  allocs.push_back(Allocation(114, 0, 0));
  allocs.push_back(Allocation(116, 1, 295936));
  allocs.push_back(Allocation(115, 0, 0));
  allocs.push_back(Allocation(117, 1, 443904));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(118, 1, 1183744));
  allocs.push_back(Allocation(117, 0, 0));
  allocs.push_back(Allocation(111, 0, 0));
  allocs.push_back(Allocation(116, 0, 0));
  allocs.push_back(Allocation(108, 0, 0));
  allocs.push_back(Allocation(119, 1, 1183744));
  allocs.push_back(Allocation(120, 1, 147968));
  allocs.push_back(Allocation(119, 0, 0));
  allocs.push_back(Allocation(121, 1, 221952));
  allocs.push_back(Allocation(122, 1, 258944));
  allocs.push_back(Allocation(121, 0, 0));
  allocs.push_back(Allocation(123, 1, 295936));
  allocs.push_back(Allocation(122, 0, 0));
  allocs.push_back(Allocation(124, 1, 221952));
  allocs.push_back(Allocation(125, 1, 221952));
  allocs.push_back(Allocation(124, 0, 0));
  allocs.push_back(Allocation(126, 1, 258944));
  allocs.push_back(Allocation(125, 0, 0));
  allocs.push_back(Allocation(127, 1, 258944));
  allocs.push_back(Allocation(126, 0, 0));
  allocs.push_back(Allocation(128, 1, 295936));
  allocs.push_back(Allocation(127, 0, 0));
  allocs.push_back(Allocation(129, 1, 443904));
  allocs.push_back(Allocation(118, 0, 0));
  allocs.push_back(Allocation(130, 1, 1183744));
  allocs.push_back(Allocation(129, 0, 0));
  allocs.push_back(Allocation(123, 0, 0));
  allocs.push_back(Allocation(128, 0, 0));
  allocs.push_back(Allocation(120, 0, 0));
  allocs.push_back(Allocation(131, 1, 1183744));
  allocs.push_back(Allocation(132, 1, 147968));
  allocs.push_back(Allocation(131, 0, 0));
  allocs.push_back(Allocation(133, 1, 221952));
  allocs.push_back(Allocation(134, 1, 258944));
  allocs.push_back(Allocation(133, 0, 0));
  allocs.push_back(Allocation(135, 1, 295936));
  allocs.push_back(Allocation(134, 0, 0));
  allocs.push_back(Allocation(136, 1, 221952));
  allocs.push_back(Allocation(137, 1, 221952));
  allocs.push_back(Allocation(136, 0, 0));
  allocs.push_back(Allocation(138, 1, 258944));
  allocs.push_back(Allocation(137, 0, 0));
  allocs.push_back(Allocation(139, 1, 258944));
  allocs.push_back(Allocation(138, 0, 0));
  allocs.push_back(Allocation(140, 1, 295936));
  allocs.push_back(Allocation(139, 0, 0));
  allocs.push_back(Allocation(141, 1, 443904));
  allocs.push_back(Allocation(130, 0, 0));
  allocs.push_back(Allocation(142, 1, 1183744));
  allocs.push_back(Allocation(141, 0, 0));
  allocs.push_back(Allocation(135, 0, 0));
  allocs.push_back(Allocation(140, 0, 0));
  allocs.push_back(Allocation(132, 0, 0));
  allocs.push_back(Allocation(143, 1, 221952));
  allocs.push_back(Allocation(144, 1, 49152));
  allocs.push_back(Allocation(143, 0, 0));
  allocs.push_back(Allocation(145, 1, 295936));
  allocs.push_back(Allocation(146, 1, 295936));
  allocs.push_back(Allocation(145, 0, 0));
  allocs.push_back(Allocation(147, 1, 369920));
  allocs.push_back(Allocation(146, 0, 0));
  allocs.push_back(Allocation(148, 1, 81920));
  allocs.push_back(Allocation(147, 0, 0));
  allocs.push_back(Allocation(149, 1, 262144));
  allocs.push_back(Allocation(142, 0, 0));
  allocs.push_back(Allocation(150, 1, 393216));
  allocs.push_back(Allocation(144, 0, 0));
  allocs.push_back(Allocation(148, 0, 0));
  allocs.push_back(Allocation(149, 0, 0));
  allocs.push_back(Allocation(151, 1, 65536));
  allocs.push_back(Allocation(152, 1, 98304));
  allocs.push_back(Allocation(153, 1, 65536));
  allocs.push_back(Allocation(154, 1, 65536));
  allocs.push_back(Allocation(152, 0, 0));
  allocs.push_back(Allocation(155, 1, 98304));
  allocs.push_back(Allocation(156, 1, 114688));
  allocs.push_back(Allocation(155, 0, 0));
  allocs.push_back(Allocation(157, 1, 131072));
  allocs.push_back(Allocation(156, 0, 0));
  allocs.push_back(Allocation(158, 1, 65536));
  allocs.push_back(Allocation(159, 1, 65536));
  allocs.push_back(Allocation(157, 0, 0));
  allocs.push_back(Allocation(160, 1, 393216));
  allocs.push_back(Allocation(150, 0, 0));
  allocs.push_back(Allocation(161, 1, 65536));
  allocs.push_back(Allocation(160, 0, 0));
  allocs.push_back(Allocation(162, 1, 393216));
  allocs.push_back(Allocation(151, 0, 0));
  allocs.push_back(Allocation(153, 0, 0));
  allocs.push_back(Allocation(154, 0, 0));
  allocs.push_back(Allocation(158, 0, 0));
  allocs.push_back(Allocation(159, 0, 0));
  allocs.push_back(Allocation(161, 0, 0));
  allocs.push_back(Allocation(163, 1, 65536));
  allocs.push_back(Allocation(164, 1, 98304));
  allocs.push_back(Allocation(165, 1, 65536));
  allocs.push_back(Allocation(166, 1, 65536));
  allocs.push_back(Allocation(164, 0, 0));
  allocs.push_back(Allocation(167, 1, 98304));
  allocs.push_back(Allocation(168, 1, 114688));
  allocs.push_back(Allocation(167, 0, 0));
  allocs.push_back(Allocation(169, 1, 131072));
  allocs.push_back(Allocation(168, 0, 0));
  allocs.push_back(Allocation(170, 1, 65536));
  allocs.push_back(Allocation(171, 1, 65536));
  allocs.push_back(Allocation(169, 0, 0));
  allocs.push_back(Allocation(172, 1, 393216));
  allocs.push_back(Allocation(162, 0, 0));
  allocs.push_back(Allocation(173, 1, 65536));
  allocs.push_back(Allocation(172, 0, 0));
  allocs.push_back(Allocation(174, 1, 393216));
  allocs.push_back(Allocation(163, 0, 0));
  allocs.push_back(Allocation(165, 0, 0));
  allocs.push_back(Allocation(166, 0, 0));
  allocs.push_back(Allocation(170, 0, 0));
  allocs.push_back(Allocation(171, 0, 0));
  allocs.push_back(Allocation(173, 0, 0));
  allocs.push_back(Allocation(175, 1, 65536));
  allocs.push_back(Allocation(176, 1, 98304));
  allocs.push_back(Allocation(177, 1, 65536));
  allocs.push_back(Allocation(178, 1, 65536));
  allocs.push_back(Allocation(176, 0, 0));
  allocs.push_back(Allocation(179, 1, 98304));
  allocs.push_back(Allocation(180, 1, 114688));
  allocs.push_back(Allocation(179, 0, 0));
  allocs.push_back(Allocation(181, 1, 131072));
  allocs.push_back(Allocation(180, 0, 0));
  allocs.push_back(Allocation(182, 1, 65536));
  allocs.push_back(Allocation(183, 1, 65536));
  allocs.push_back(Allocation(181, 0, 0));
  allocs.push_back(Allocation(184, 1, 393216));
  allocs.push_back(Allocation(174, 0, 0));
  allocs.push_back(Allocation(185, 1, 65536));
  allocs.push_back(Allocation(184, 0, 0));
  allocs.push_back(Allocation(186, 1, 393216));
  allocs.push_back(Allocation(175, 0, 0));
  allocs.push_back(Allocation(177, 0, 0));
  allocs.push_back(Allocation(178, 0, 0));
  allocs.push_back(Allocation(182, 0, 0));
  allocs.push_back(Allocation(183, 0, 0));
  allocs.push_back(Allocation(185, 0, 0));
  allocs.push_back(Allocation(187, 1, 6144));
  allocs.push_back(Allocation(186, 0, 0));
  allocs.push_back(Allocation(188, 1, 4004));
  allocs.push_back(Allocation(187, 0, 0));
  allocs.push_back(Allocation(188, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8942464);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model kws.onnx.
TEST(MemAlloc, testAllocateAllForModel6) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 100548));
  allocs.push_back(Allocation(2, 1, 4096));
  allocs.push_back(Allocation(3, 1, 4104));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(4, 1, 1960));
  allocs.push_back(Allocation(5, 1, 160));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(6, 1, 276000));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(7, 1, 71760));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 71760));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 71760));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 71760));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 71760));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 71760));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 71760));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 71760));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 71760));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 71760));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 1104));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 48));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 347840);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model lenet_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel7) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 11520));
  allocs.push_back(Allocation(2, 1, 2880));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3200));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 800));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 500));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 10));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 40));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 14400);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_128.tflite.
TEST(MemAlloc, testAllocateAllForModel8) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 131072));
  allocs.push_back(Allocation(2, 1, 131072));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 262144));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 65536));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 131072));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 131072));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 131072));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 32768));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 65536));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 65536));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 65536));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 16384));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 32768));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 32768));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 32768));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 32768));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 32768));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 32768));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 32768));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 32768));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 32768));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 32768));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 32768));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 8192));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 16384));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 16384));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 16384));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 393216);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_128_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel9) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 32768));
  allocs.push_back(Allocation(2, 1, 32768));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 65536));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 16384));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 32768));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 32768));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 32768));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 8192));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 16384));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 16384));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 16384));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 4096));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 8192));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 8192));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 8192));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 8192));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 8192));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 8192));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 8192));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 8192));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 8192));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 8192));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 8192));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 2048));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 4096));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 4096));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 4096));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 256));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 98304);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_160.tflite.
TEST(MemAlloc, testAllocateAllForModel10) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 204800));
  allocs.push_back(Allocation(2, 1, 204800));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 409600));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 102400));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 204800));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 204800));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 204800));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 51200));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 102400));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 102400));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 102400));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 25600));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 51200));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 51200));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 51200));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 51200));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 51200));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 51200));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 51200));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 51200));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 51200));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 51200));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 51200));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12800));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 25600));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 25600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 25600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 614400);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_160_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel11) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 51200));
  allocs.push_back(Allocation(2, 1, 51200));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 102400));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 25600));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 51200));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 51200));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 51200));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 12800));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 25600));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 25600));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 25600));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 6400));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 12800));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 12800));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 12800));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 12800));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 12800));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 12800));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 12800));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 12800));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 12800));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 12800));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 12800));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 3200));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 6400));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 6400));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 6400));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 256));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 153600);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_192.tflite.
TEST(MemAlloc, testAllocateAllForModel12) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 294912));
  allocs.push_back(Allocation(2, 1, 294912));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 589824));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 147456));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 294912));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 294912));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 294912));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 73728));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 147456));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 147456));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 147456));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 36864));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 73728));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 73728));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 73728));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 73728));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 73728));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 73728));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 73728));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 73728));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 73728));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 73728));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 73728));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 18432));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 36864));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 36864));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 36864));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 884736);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_192_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel13) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 73728));
  allocs.push_back(Allocation(2, 1, 73728));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 147456));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 36864));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 73728));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 73728));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 73728));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 18432));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 36864));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 36864));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 36864));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 9216));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 18432));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 18432));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 18432));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 18432));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 18432));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 18432));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 18432));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 18432));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 18432));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 18432));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 18432));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 4608));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 9216));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 9216));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 9216));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 256));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 221184);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_224.tflite.
TEST(MemAlloc, testAllocateAllForModel14) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 401408));
  allocs.push_back(Allocation(2, 1, 401408));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 200704));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 401408));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 401408));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 401408));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 100352));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 200704));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 200704));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 200704));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 50176));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 100352));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 100352));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 100352));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 100352));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 100352));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 100352));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 100352));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 100352));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 100352));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 100352));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 100352));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 25088));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 50176));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 50176));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 50176));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1204224);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.25_224_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel15) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 100352));
  allocs.push_back(Allocation(2, 1, 100352));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 200704));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 50176));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 100352));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 100352));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 100352));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 25088));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 50176));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 50176));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 50176));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 12544));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 25088));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 25088));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 25088));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 25088));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 25088));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 25088));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 25088));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 25088));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 25088));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 25088));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 25088));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 6272));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 12544));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 12544));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12544));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 256));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 301056);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_128.tflite.
TEST(MemAlloc, testAllocateAllForModel16) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 262144));
  allocs.push_back(Allocation(2, 1, 262144));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 524288));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 131072));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 262144));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 262144));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 262144));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 65536));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 131072));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 131072));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 131072));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 32768));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 65536));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 65536));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 65536));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 65536));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 65536));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 65536));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 65536));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 65536));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 65536));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 65536));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 65536));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 16384));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 32768));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 32768));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 32768));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 2048));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 786432);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_128_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel17) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 65536));
  allocs.push_back(Allocation(2, 1, 65536));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 131072));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 32768));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 65536));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 65536));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 65536));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 16384));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 32768));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 32768));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 32768));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 8192));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 16384));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 16384));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 16384));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 16384));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 16384));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 16384));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 16384));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 16384));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 16384));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 16384));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 16384));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 4096));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 8192));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 8192));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 8192));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 512));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 196608);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_160.tflite.
TEST(MemAlloc, testAllocateAllForModel18) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 409600));
  allocs.push_back(Allocation(2, 1, 409600));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 819200));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 204800));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 409600));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 409600));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 409600));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 102400));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 204800));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 204800));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 204800));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 51200));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 102400));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 102400));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 102400));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 102400));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 102400));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 102400));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 102400));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 102400));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 102400));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 102400));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 102400));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 25600));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 51200));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 51200));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 51200));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 2048));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1228800);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_160_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel19) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 102400));
  allocs.push_back(Allocation(2, 1, 102400));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 204800));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 51200));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 102400));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 102400));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 102400));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 25600));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 51200));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 51200));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 51200));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 12800));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 25600));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 25600));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 25600));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 25600));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 25600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 25600));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 25600));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 25600));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 25600));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 25600));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 25600));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 6400));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 12800));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 12800));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12800));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 512));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 307200);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_192.tflite.
TEST(MemAlloc, testAllocateAllForModel20) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 589824));
  allocs.push_back(Allocation(2, 1, 589824));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1179648));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 294912));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 589824));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 589824));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 589824));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 147456));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 294912));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 294912));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 294912));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 73728));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 147456));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 147456));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 147456));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 147456));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 147456));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 147456));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 147456));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 147456));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 147456));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 147456));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 147456));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 36864));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 73728));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 73728));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 73728));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 2048));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1769472);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_192_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel21) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 147456));
  allocs.push_back(Allocation(2, 1, 147456));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 294912));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 73728));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 147456));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 147456));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 147456));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 36864));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 73728));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 73728));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 73728));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 18432));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 36864));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 36864));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 36864));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 36864));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 36864));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 36864));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 36864));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 36864));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 36864));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 36864));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 36864));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 9216));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 18432));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 18432));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 18432));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 512));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 442368);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_224.tflite.
TEST(MemAlloc, testAllocateAllForModel22) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 802816));
  allocs.push_back(Allocation(2, 1, 802816));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1605632));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 401408));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 802816));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 200704));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 401408));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 401408));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 401408));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 100352));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 200704));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 200704));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 200704));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 200704));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 200704));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 200704));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 200704));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 200704));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 200704));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 200704));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 200704));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 50176));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 100352));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 100352));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 100352));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 2048));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 2408448);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.50_224_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel23) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 200704));
  allocs.push_back(Allocation(2, 1, 200704));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 401408));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 100352));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 200704));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 200704));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 200704));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 50176));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 100352));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 100352));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 100352));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 25088));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 50176));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 50176));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 50176));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 50176));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 50176));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 50176));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 50176));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 50176));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 50176));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 50176));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 50176));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12544));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 25088));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 25088));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 25088));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 512));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 602112);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_128.tflite.
TEST(MemAlloc, testAllocateAllForModel24) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 393216));
  allocs.push_back(Allocation(2, 1, 393216));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 786432));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 196608));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 393216));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 393216));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 393216));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 98304));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 196608));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 196608));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 196608));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 49152));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 98304));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 98304));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 98304));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 98304));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 98304));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 98304));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 98304));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 98304));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 98304));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 98304));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 98304));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 24576));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 49152));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 49152));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 49152));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 3072));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1179648);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_128_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel25) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 98304));
  allocs.push_back(Allocation(2, 1, 98304));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 196608));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 49152));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 98304));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 98304));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 98304));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 24576));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 49152));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 49152));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 49152));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 12288));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 24576));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 24576));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 24576));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 24576));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 24576));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 24576));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 24576));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 24576));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 24576));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 24576));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 24576));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 6144));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 12288));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 12288));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12288));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 768));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 294912);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_160.tflite.
TEST(MemAlloc, testAllocateAllForModel26) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 614400));
  allocs.push_back(Allocation(2, 1, 614400));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1228800));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 307200));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 614400));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 614400));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 614400));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 153600));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 307200));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 307200));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 307200));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 76800));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 153600));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 153600));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 153600));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 153600));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 153600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 153600));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 153600));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 153600));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 153600));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 153600));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 153600));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 38400));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 76800));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 76800));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 76800));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 3072));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1843200);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_160_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel27) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 153600));
  allocs.push_back(Allocation(2, 1, 153600));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 307200));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 76800));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 153600));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 153600));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 153600));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 38400));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 76800));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 76800));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 76800));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 19200));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 38400));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 38400));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 38400));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 38400));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 38400));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 38400));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 38400));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 38400));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 38400));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 38400));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 38400));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 9600));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 19200));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 19200));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 19200));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 768));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 460800);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_192.tflite.
TEST(MemAlloc, testAllocateAllForModel28) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 884736));
  allocs.push_back(Allocation(2, 1, 884736));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1769472));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 442368));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 884736));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 884736));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 884736));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 221184));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 442368));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 442368));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 442368));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 110592));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 221184));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 221184));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 221184));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 221184));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 221184));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 221184));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 221184));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 221184));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 221184));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 221184));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 221184));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 55296));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 110592));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 110592));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 110592));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 3072));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 2654208);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_192_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel29) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 221184));
  allocs.push_back(Allocation(2, 1, 221184));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 442368));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 110592));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 221184));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 221184));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 221184));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 55296));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 110592));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 110592));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 110592));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 27648));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 55296));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 55296));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 55296));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 55296));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 55296));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 55296));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 55296));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 55296));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 55296));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 55296));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 55296));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 13824));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 27648));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 27648));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 27648));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 768));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 663552);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_224.tflite.
TEST(MemAlloc, testAllocateAllForModel30) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1204224));
  allocs.push_back(Allocation(2, 1, 1204224));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 2408448));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 602112));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1204224));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 1204224));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1204224));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 301056));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 602112));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 602112));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 602112));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 150528));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 301056));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 301056));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 301056));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 301056));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 301056));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 301056));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 301056));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 301056));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 301056));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 301056));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 301056));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 75264));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 150528));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 150528));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 150528));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 3072));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3612672);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_0.75_224_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel31) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 301056));
  allocs.push_back(Allocation(2, 1, 301056));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 602112));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 150528));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 301056));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 301056));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 301056));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 75264));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 150528));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 150528));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 150528));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 37632));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 75264));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 75264));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 75264));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 75264));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 75264));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 75264));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 75264));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 75264));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 75264));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 75264));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 75264));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 18816));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 37632));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 37632));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 37632));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 768));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 903168);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_128.tflite.
TEST(MemAlloc, testAllocateAllForModel32) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 524288));
  allocs.push_back(Allocation(2, 1, 524288));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1048576));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 262144));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 524288));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 524288));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 524288));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 131072));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 262144));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 262144));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 262144));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 65536));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 131072));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 131072));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 131072));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 131072));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 131072));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 131072));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 131072));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 131072));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 131072));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 131072));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 131072));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 32768));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 65536));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 65536));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 65536));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 4096));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1572864);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_128_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel33) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 131072));
  allocs.push_back(Allocation(2, 1, 131072));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 262144));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 65536));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 131072));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 131072));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 131072));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 32768));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 65536));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 65536));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 65536));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 16384));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 32768));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 32768));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 32768));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 32768));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 32768));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 32768));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 32768));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 32768));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 32768));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 32768));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 32768));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 8192));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 16384));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 16384));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 16384));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 393216);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_160.tflite.
TEST(MemAlloc, testAllocateAllForModel34) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 819200));
  allocs.push_back(Allocation(2, 1, 819200));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1638400));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 409600));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 819200));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 819200));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 819200));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 204800));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 409600));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 409600));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 409600));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 102400));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 204800));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 204800));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 204800));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 204800));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 204800));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 204800));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 204800));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 204800));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 204800));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 204800));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 204800));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 51200));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 102400));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 102400));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 102400));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 4096));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 2457600);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_160_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel35) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 204800));
  allocs.push_back(Allocation(2, 1, 204800));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 409600));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 102400));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 204800));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 204800));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 204800));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 51200));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 102400));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 102400));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 102400));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 25600));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 51200));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 51200));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 51200));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 51200));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 51200));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 51200));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 51200));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 51200));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 51200));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 51200));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 51200));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12800));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 25600));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 25600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 25600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 614400);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_192.tflite.
TEST(MemAlloc, testAllocateAllForModel36) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1179648));
  allocs.push_back(Allocation(2, 1, 1179648));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 2359296));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 589824));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1179648));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 1179648));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1179648));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 294912));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 589824));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 589824));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 589824));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 147456));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 294912));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 294912));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 294912));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 294912));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 294912));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 294912));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 294912));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 294912));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 294912));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 294912));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 294912));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 73728));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 147456));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 147456));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 147456));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 4096));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3538944);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_192_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel37) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 294912));
  allocs.push_back(Allocation(2, 1, 294912));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 589824));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 147456));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 294912));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 294912));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 294912));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 73728));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 147456));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 147456));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 147456));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 36864));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 73728));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 73728));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 73728));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 73728));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 73728));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 73728));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 73728));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 73728));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 73728));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 73728));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 73728));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 18432));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 36864));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 36864));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 36864));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 884736);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_224.tflite.
TEST(MemAlloc, testAllocateAllForModel38) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1605632));
  allocs.push_back(Allocation(2, 1, 1605632));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1605632));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 1605632));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1605632));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 401408));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 200704));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 401408));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 401408));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 401408));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 401408));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 401408));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 100352));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 200704));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 200704));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 200704));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 4096));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 4004));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4816896);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_1.00_224_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel39) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 401408));
  allocs.push_back(Allocation(2, 1, 401408));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 200704));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 401408));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 401408));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 401408));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 100352));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 200704));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 200704));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 200704));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 50176));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 100352));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 100352));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 100352));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 100352));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 100352));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 100352));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 100352));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 100352));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 100352));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 100352));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 100352));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 25088));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 50176));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 50176));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 50176));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1024));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1001));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4004));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1204224);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v1_ssd.onnx.
TEST(MemAlloc, testAllocateAllForModel40) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1080000));
  allocs.push_back(Allocation(2, 1, 2880000));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 2880000));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 5760000));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1440000));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 2880000));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2880000));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 2880000));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 739328));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 1478656));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 1478656));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 1478656));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 369664));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 739328));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 739328));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 739328));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 739328));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 739328));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 739328));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 739328));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 739328));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 739328));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 739328));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 739328));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 204800));
  allocs.push_back(Allocation(26, 1, 409600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 409600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 409600));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 102400));
  allocs.push_back(Allocation(30, 1, 51200));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 12800));
  allocs.push_back(Allocation(32, 1, 9216));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 4608));
  allocs.push_back(Allocation(34, 1, 4096));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 2048));
  allocs.push_back(Allocation(36, 1, 1024));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 504));
  allocs.push_back(Allocation(38, 1, 2016));
  allocs.push_back(Allocation(39, 1, 4536));
  allocs.push_back(Allocation(40, 1, 12600));
  allocs.push_back(Allocation(41, 1, 50400));
  allocs.push_back(Allocation(42, 1, 181944));
  allocs.push_back(Allocation(43, 1, 252000));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(44, 1, 96));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(45, 1, 384));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(46, 1, 864));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(47, 1, 2400));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(48, 1, 9600));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(49, 1, 34656));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(50, 1, 48000));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(51, 1, 24000));
  allocs.push_back(Allocation(52, 1, 24000));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(53, 1, 24000));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8640000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.35_128.tflite.
TEST(MemAlloc, testAllocateAllForModel41) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 262144));
  allocs.push_back(Allocation(2, 1, 262144));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 131072));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 786432));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 196608));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 32768));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 196608));
  allocs.push_back(Allocation(8, 1, 196608));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 32768));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 196608));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 49152));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 16384));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 98304));
  allocs.push_back(Allocation(14, 1, 98304));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 16384));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 98304));
  allocs.push_back(Allocation(17, 1, 98304));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 16384));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 98304));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 24576));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 6144));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 36864));
  allocs.push_back(Allocation(23, 1, 36864));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 6144));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 36864));
  allocs.push_back(Allocation(26, 1, 36864));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 6144));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 36864));
  allocs.push_back(Allocation(29, 1, 36864));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 6144));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 36864));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 36864));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 8192));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 49152));
  allocs.push_back(Allocation(35, 1, 49152));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 8192));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 49152));
  allocs.push_back(Allocation(38, 1, 49152));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 8192));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 49152));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 12288));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 3584));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 21504));
  allocs.push_back(Allocation(44, 1, 21504));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 3584));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 21504));
  allocs.push_back(Allocation(47, 1, 21504));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 3584));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 21504));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 21504));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 7168));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 81920));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 983040);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.35_160.tflite.
TEST(MemAlloc, testAllocateAllForModel42) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 409600));
  allocs.push_back(Allocation(2, 1, 409600));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 204800));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1228800));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 307200));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 51200));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 307200));
  allocs.push_back(Allocation(8, 1, 307200));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 51200));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 307200));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 76800));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 25600));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 153600));
  allocs.push_back(Allocation(14, 1, 153600));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 25600));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 153600));
  allocs.push_back(Allocation(17, 1, 153600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 25600));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 153600));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 38400));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 9600));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 57600));
  allocs.push_back(Allocation(23, 1, 57600));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 9600));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 57600));
  allocs.push_back(Allocation(26, 1, 57600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 9600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 57600));
  allocs.push_back(Allocation(29, 1, 57600));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 9600));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 57600));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 57600));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 12800));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 76800));
  allocs.push_back(Allocation(35, 1, 76800));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 12800));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 76800));
  allocs.push_back(Allocation(38, 1, 76800));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 12800));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 76800));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 19200));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 5600));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 33600));
  allocs.push_back(Allocation(44, 1, 33600));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 5600));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 33600));
  allocs.push_back(Allocation(47, 1, 33600));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 5600));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 33600));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 33600));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 11200));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 128000));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1536000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.35_192.tflite.
TEST(MemAlloc, testAllocateAllForModel43) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 589824));
  allocs.push_back(Allocation(2, 1, 589824));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 294912));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1769472));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 442368));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 73728));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 442368));
  allocs.push_back(Allocation(8, 1, 442368));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 73728));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 442368));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 110592));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 36864));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 221184));
  allocs.push_back(Allocation(14, 1, 221184));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 36864));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 221184));
  allocs.push_back(Allocation(17, 1, 221184));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 36864));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 221184));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 55296));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 13824));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 82944));
  allocs.push_back(Allocation(23, 1, 82944));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 13824));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 82944));
  allocs.push_back(Allocation(26, 1, 82944));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 13824));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 82944));
  allocs.push_back(Allocation(29, 1, 82944));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 13824));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 82944));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 82944));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 18432));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 110592));
  allocs.push_back(Allocation(35, 1, 110592));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 18432));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 110592));
  allocs.push_back(Allocation(38, 1, 110592));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 18432));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 110592));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 27648));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 8064));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 48384));
  allocs.push_back(Allocation(44, 1, 48384));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 8064));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 48384));
  allocs.push_back(Allocation(47, 1, 48384));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 8064));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 48384));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 48384));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 16128));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 184320));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 2211840);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.35_224.tflite.
TEST(MemAlloc, testAllocateAllForModel44) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 802816));
  allocs.push_back(Allocation(2, 1, 802816));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 401408));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2408448));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 602112));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 100352));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 602112));
  allocs.push_back(Allocation(8, 1, 602112));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 100352));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 602112));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 150528));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 50176));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 301056));
  allocs.push_back(Allocation(14, 1, 301056));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 50176));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 301056));
  allocs.push_back(Allocation(17, 1, 301056));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 50176));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 301056));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 75264));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 18816));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 112896));
  allocs.push_back(Allocation(23, 1, 112896));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 18816));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 112896));
  allocs.push_back(Allocation(26, 1, 112896));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 18816));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 112896));
  allocs.push_back(Allocation(29, 1, 112896));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 18816));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 112896));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 112896));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 25088));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 150528));
  allocs.push_back(Allocation(35, 1, 150528));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 25088));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 150528));
  allocs.push_back(Allocation(38, 1, 150528));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 25088));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 150528));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 37632));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 10976));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 65856));
  allocs.push_back(Allocation(44, 1, 65856));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 10976));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 65856));
  allocs.push_back(Allocation(47, 1, 65856));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 10976));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 65856));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 65856));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 21952));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 250880));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3010560);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.35_96.tflite.
TEST(MemAlloc, testAllocateAllForModel45) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 147456));
  allocs.push_back(Allocation(2, 1, 147456));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 73728));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 442368));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 110592));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 18432));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 110592));
  allocs.push_back(Allocation(8, 1, 110592));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 18432));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 110592));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 27648));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 9216));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 55296));
  allocs.push_back(Allocation(14, 1, 55296));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 9216));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 55296));
  allocs.push_back(Allocation(17, 1, 55296));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 9216));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 55296));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 13824));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 3456));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 20736));
  allocs.push_back(Allocation(23, 1, 20736));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 3456));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 20736));
  allocs.push_back(Allocation(26, 1, 20736));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 3456));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 20736));
  allocs.push_back(Allocation(29, 1, 20736));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 3456));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 20736));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 20736));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 4608));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 27648));
  allocs.push_back(Allocation(35, 1, 27648));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 4608));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 27648));
  allocs.push_back(Allocation(38, 1, 27648));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 4608));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 27648));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 6912));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 2016));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 12096));
  allocs.push_back(Allocation(44, 1, 12096));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 2016));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 12096));
  allocs.push_back(Allocation(47, 1, 12096));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 2016));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 12096));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 12096));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 4032));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 46080));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 552960);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.50_128.tflite.
TEST(MemAlloc, testAllocateAllForModel46) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 262144));
  allocs.push_back(Allocation(2, 1, 262144));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 131072));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 786432));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 196608));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 65536));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 393216));
  allocs.push_back(Allocation(8, 1, 393216));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 65536));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 393216));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 98304));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 16384));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 98304));
  allocs.push_back(Allocation(14, 1, 98304));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 16384));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 98304));
  allocs.push_back(Allocation(17, 1, 98304));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 16384));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 98304));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 24576));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 8192));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 49152));
  allocs.push_back(Allocation(23, 1, 49152));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 8192));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 49152));
  allocs.push_back(Allocation(26, 1, 49152));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 8192));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 49152));
  allocs.push_back(Allocation(29, 1, 49152));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 8192));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 49152));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 49152));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 12288));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 73728));
  allocs.push_back(Allocation(35, 1, 73728));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 12288));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 73728));
  allocs.push_back(Allocation(38, 1, 73728));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 12288));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 73728));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 18432));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 5120));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 30720));
  allocs.push_back(Allocation(44, 1, 30720));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 5120));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 30720));
  allocs.push_back(Allocation(47, 1, 30720));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 5120));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 30720));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 30720));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 10240));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 81920));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 983040);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.50_160.tflite.
TEST(MemAlloc, testAllocateAllForModel47) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 409600));
  allocs.push_back(Allocation(2, 1, 409600));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 204800));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1228800));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 307200));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 102400));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 614400));
  allocs.push_back(Allocation(8, 1, 614400));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 102400));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 614400));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 153600));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 25600));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 153600));
  allocs.push_back(Allocation(14, 1, 153600));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 25600));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 153600));
  allocs.push_back(Allocation(17, 1, 153600));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 25600));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 153600));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 38400));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 12800));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 76800));
  allocs.push_back(Allocation(23, 1, 76800));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12800));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 76800));
  allocs.push_back(Allocation(26, 1, 76800));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12800));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 76800));
  allocs.push_back(Allocation(29, 1, 76800));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 12800));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 76800));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 76800));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 19200));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 115200));
  allocs.push_back(Allocation(35, 1, 115200));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 19200));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 115200));
  allocs.push_back(Allocation(38, 1, 115200));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 19200));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 115200));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 28800));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 8000));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 48000));
  allocs.push_back(Allocation(44, 1, 48000));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 8000));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 48000));
  allocs.push_back(Allocation(47, 1, 48000));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 8000));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 48000));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 48000));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 16000));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 128000));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1536000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.50_192.tflite.
TEST(MemAlloc, testAllocateAllForModel48) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 589824));
  allocs.push_back(Allocation(2, 1, 589824));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 294912));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1769472));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 442368));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 147456));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 884736));
  allocs.push_back(Allocation(8, 1, 884736));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 147456));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 884736));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 221184));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 36864));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 221184));
  allocs.push_back(Allocation(14, 1, 221184));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 36864));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 221184));
  allocs.push_back(Allocation(17, 1, 221184));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 36864));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 221184));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 55296));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 18432));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 110592));
  allocs.push_back(Allocation(23, 1, 110592));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 18432));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 110592));
  allocs.push_back(Allocation(26, 1, 110592));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 18432));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 110592));
  allocs.push_back(Allocation(29, 1, 110592));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 18432));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 110592));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 110592));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 27648));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 165888));
  allocs.push_back(Allocation(35, 1, 165888));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 27648));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 165888));
  allocs.push_back(Allocation(38, 1, 165888));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 27648));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 165888));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 41472));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 11520));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 69120));
  allocs.push_back(Allocation(44, 1, 69120));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 11520));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 69120));
  allocs.push_back(Allocation(47, 1, 69120));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 11520));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 69120));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 69120));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 23040));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 184320));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 2211840);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.50_224.tflite.
TEST(MemAlloc, testAllocateAllForModel49) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 802816));
  allocs.push_back(Allocation(2, 1, 802816));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 401408));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2408448));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 602112));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 200704));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1204224));
  allocs.push_back(Allocation(8, 1, 1204224));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 200704));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1204224));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 301056));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 50176));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 301056));
  allocs.push_back(Allocation(14, 1, 301056));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 50176));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 301056));
  allocs.push_back(Allocation(17, 1, 301056));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 50176));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 301056));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 75264));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 25088));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 150528));
  allocs.push_back(Allocation(23, 1, 150528));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 25088));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 150528));
  allocs.push_back(Allocation(26, 1, 150528));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 25088));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 150528));
  allocs.push_back(Allocation(29, 1, 150528));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 25088));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 150528));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 150528));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 37632));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 225792));
  allocs.push_back(Allocation(35, 1, 225792));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 37632));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 225792));
  allocs.push_back(Allocation(38, 1, 225792));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 37632));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 225792));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 56448));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 15680));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 94080));
  allocs.push_back(Allocation(44, 1, 94080));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 15680));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 94080));
  allocs.push_back(Allocation(47, 1, 94080));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 15680));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 94080));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 94080));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 31360));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 250880));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3010560);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.50_96.tflite.
TEST(MemAlloc, testAllocateAllForModel50) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 147456));
  allocs.push_back(Allocation(2, 1, 147456));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 73728));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 442368));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 110592));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 36864));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 221184));
  allocs.push_back(Allocation(8, 1, 221184));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 36864));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 221184));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 55296));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 9216));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 55296));
  allocs.push_back(Allocation(14, 1, 55296));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 9216));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 55296));
  allocs.push_back(Allocation(17, 1, 55296));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 9216));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 55296));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 13824));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 4608));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 27648));
  allocs.push_back(Allocation(23, 1, 27648));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 4608));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 27648));
  allocs.push_back(Allocation(26, 1, 27648));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 4608));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 27648));
  allocs.push_back(Allocation(29, 1, 27648));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 4608));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 27648));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 27648));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 6912));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 41472));
  allocs.push_back(Allocation(35, 1, 41472));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 6912));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 41472));
  allocs.push_back(Allocation(38, 1, 41472));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 6912));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 41472));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 10368));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 2880));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 17280));
  allocs.push_back(Allocation(44, 1, 17280));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 2880));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 17280));
  allocs.push_back(Allocation(47, 1, 17280));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 2880));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 17280));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 17280));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 5760));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 46080));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 552960);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.75_128.tflite.
TEST(MemAlloc, testAllocateAllForModel51) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 393216));
  allocs.push_back(Allocation(2, 1, 393216));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 262144));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1572864));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 393216));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 98304));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 589824));
  allocs.push_back(Allocation(8, 1, 589824));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 98304));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 589824));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 147456));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 24576));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 147456));
  allocs.push_back(Allocation(14, 1, 147456));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 24576));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 147456));
  allocs.push_back(Allocation(17, 1, 147456));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 24576));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 147456));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 36864));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 12288));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 73728));
  allocs.push_back(Allocation(23, 1, 73728));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12288));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 73728));
  allocs.push_back(Allocation(26, 1, 73728));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12288));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 73728));
  allocs.push_back(Allocation(29, 1, 73728));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 12288));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 73728));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 73728));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 18432));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 110592));
  allocs.push_back(Allocation(35, 1, 110592));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 18432));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 110592));
  allocs.push_back(Allocation(38, 1, 110592));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 18432));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 110592));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 27648));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 7680));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 46080));
  allocs.push_back(Allocation(44, 1, 46080));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 7680));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 46080));
  allocs.push_back(Allocation(47, 1, 46080));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 7680));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 46080));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 46080));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 15360));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 81920));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1966080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.75_160.tflite.
TEST(MemAlloc, testAllocateAllForModel52) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 614400));
  allocs.push_back(Allocation(2, 1, 614400));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 409600));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2457600));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 614400));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 153600));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 921600));
  allocs.push_back(Allocation(8, 1, 921600));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 153600));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 921600));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 230400));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 38400));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 230400));
  allocs.push_back(Allocation(14, 1, 230400));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 38400));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 230400));
  allocs.push_back(Allocation(17, 1, 230400));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 38400));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 230400));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 57600));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 19200));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 115200));
  allocs.push_back(Allocation(23, 1, 115200));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 19200));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 115200));
  allocs.push_back(Allocation(26, 1, 115200));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 19200));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 115200));
  allocs.push_back(Allocation(29, 1, 115200));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 19200));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 115200));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 115200));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 28800));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 172800));
  allocs.push_back(Allocation(35, 1, 172800));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 28800));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 172800));
  allocs.push_back(Allocation(38, 1, 172800));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 28800));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 172800));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 43200));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 12000));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 72000));
  allocs.push_back(Allocation(44, 1, 72000));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 12000));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 72000));
  allocs.push_back(Allocation(47, 1, 72000));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 12000));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 72000));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 72000));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 24000));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 128000));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3072000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.75_192.tflite.
TEST(MemAlloc, testAllocateAllForModel53) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 884736));
  allocs.push_back(Allocation(2, 1, 884736));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 589824));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 3538944));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 884736));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 221184));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1327104));
  allocs.push_back(Allocation(8, 1, 1327104));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 221184));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1327104));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 331776));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 55296));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 331776));
  allocs.push_back(Allocation(14, 1, 331776));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 55296));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 331776));
  allocs.push_back(Allocation(17, 1, 331776));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 55296));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 331776));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 82944));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 27648));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 165888));
  allocs.push_back(Allocation(23, 1, 165888));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 27648));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 165888));
  allocs.push_back(Allocation(26, 1, 165888));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 27648));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 165888));
  allocs.push_back(Allocation(29, 1, 165888));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 27648));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 165888));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 165888));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 41472));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 248832));
  allocs.push_back(Allocation(35, 1, 248832));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 41472));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 248832));
  allocs.push_back(Allocation(38, 1, 248832));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 41472));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 248832));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 62208));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 17280));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 103680));
  allocs.push_back(Allocation(44, 1, 103680));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 17280));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 103680));
  allocs.push_back(Allocation(47, 1, 103680));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 17280));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 103680));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 103680));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 34560));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 184320));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4423680);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.75_224.tflite.
TEST(MemAlloc, testAllocateAllForModel54) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1204224));
  allocs.push_back(Allocation(2, 1, 1204224));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 4816896));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1204224));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 301056));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1806336));
  allocs.push_back(Allocation(8, 1, 1806336));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 301056));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1806336));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 451584));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 75264));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 451584));
  allocs.push_back(Allocation(14, 1, 451584));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 75264));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 451584));
  allocs.push_back(Allocation(17, 1, 451584));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 75264));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 451584));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 112896));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 37632));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 225792));
  allocs.push_back(Allocation(23, 1, 225792));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 37632));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 225792));
  allocs.push_back(Allocation(26, 1, 225792));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 37632));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 225792));
  allocs.push_back(Allocation(29, 1, 225792));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 37632));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 225792));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 225792));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 56448));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 338688));
  allocs.push_back(Allocation(35, 1, 338688));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 56448));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 338688));
  allocs.push_back(Allocation(38, 1, 338688));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 56448));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 338688));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 84672));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 23520));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 141120));
  allocs.push_back(Allocation(44, 1, 141120));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 23520));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 141120));
  allocs.push_back(Allocation(47, 1, 141120));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 23520));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 141120));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 141120));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 47040));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 250880));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 6021120);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_0.75_96.tflite.
TEST(MemAlloc, testAllocateAllForModel55) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 221184));
  allocs.push_back(Allocation(2, 1, 221184));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 147456));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 884736));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 221184));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 55296));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 331776));
  allocs.push_back(Allocation(8, 1, 331776));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 55296));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 331776));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 82944));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 13824));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 82944));
  allocs.push_back(Allocation(14, 1, 82944));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 13824));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 82944));
  allocs.push_back(Allocation(17, 1, 82944));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 13824));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 82944));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 20736));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 6912));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 41472));
  allocs.push_back(Allocation(23, 1, 41472));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 6912));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 41472));
  allocs.push_back(Allocation(26, 1, 41472));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 6912));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 41472));
  allocs.push_back(Allocation(29, 1, 41472));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 6912));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 41472));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 41472));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 10368));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 62208));
  allocs.push_back(Allocation(35, 1, 62208));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 10368));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 62208));
  allocs.push_back(Allocation(38, 1, 62208));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 10368));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 62208));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 15552));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 4320));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 25920));
  allocs.push_back(Allocation(44, 1, 25920));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 4320));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 25920));
  allocs.push_back(Allocation(47, 1, 25920));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 4320));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 25920));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 25920));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 8640));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 46080));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1105920);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_128.tflite.
TEST(MemAlloc, testAllocateAllForModel56) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 524288));
  allocs.push_back(Allocation(2, 1, 524288));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 262144));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1572864));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 393216));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 98304));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 589824));
  allocs.push_back(Allocation(8, 1, 589824));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 98304));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 589824));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 147456));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 32768));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 196608));
  allocs.push_back(Allocation(14, 1, 196608));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 32768));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 196608));
  allocs.push_back(Allocation(17, 1, 196608));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 32768));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 196608));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 49152));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 16384));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 98304));
  allocs.push_back(Allocation(23, 1, 98304));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 16384));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 98304));
  allocs.push_back(Allocation(26, 1, 98304));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 16384));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 98304));
  allocs.push_back(Allocation(29, 1, 98304));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 16384));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 98304));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 98304));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 24576));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 147456));
  allocs.push_back(Allocation(35, 1, 147456));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 24576));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 147456));
  allocs.push_back(Allocation(38, 1, 147456));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 24576));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 147456));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 36864));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 10240));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 61440));
  allocs.push_back(Allocation(44, 1, 61440));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 10240));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 61440));
  allocs.push_back(Allocation(47, 1, 61440));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 10240));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 61440));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 61440));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 20480));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 81920));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1966080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_160.tflite.
TEST(MemAlloc, testAllocateAllForModel57) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 819200));
  allocs.push_back(Allocation(2, 1, 819200));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 409600));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2457600));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 614400));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 153600));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 921600));
  allocs.push_back(Allocation(8, 1, 921600));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 153600));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 921600));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 230400));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 51200));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 307200));
  allocs.push_back(Allocation(14, 1, 307200));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 51200));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 307200));
  allocs.push_back(Allocation(17, 1, 307200));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 51200));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 307200));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 76800));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 25600));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 153600));
  allocs.push_back(Allocation(23, 1, 153600));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 25600));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 153600));
  allocs.push_back(Allocation(26, 1, 153600));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 25600));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 153600));
  allocs.push_back(Allocation(29, 1, 153600));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 25600));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 153600));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 153600));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 38400));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 230400));
  allocs.push_back(Allocation(35, 1, 230400));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 38400));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 230400));
  allocs.push_back(Allocation(38, 1, 230400));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 38400));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 230400));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 57600));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 16000));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 96000));
  allocs.push_back(Allocation(44, 1, 96000));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 16000));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 96000));
  allocs.push_back(Allocation(47, 1, 96000));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 16000));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 96000));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 96000));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 32000));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 128000));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 3072000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_192.tflite.
TEST(MemAlloc, testAllocateAllForModel58) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1179648));
  allocs.push_back(Allocation(2, 1, 1179648));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 589824));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 3538944));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 884736));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 221184));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1327104));
  allocs.push_back(Allocation(8, 1, 1327104));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 221184));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1327104));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 331776));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 73728));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 442368));
  allocs.push_back(Allocation(14, 1, 442368));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 73728));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 442368));
  allocs.push_back(Allocation(17, 1, 442368));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 73728));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 442368));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 110592));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 36864));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 221184));
  allocs.push_back(Allocation(23, 1, 221184));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 36864));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 221184));
  allocs.push_back(Allocation(26, 1, 221184));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 36864));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 221184));
  allocs.push_back(Allocation(29, 1, 221184));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 36864));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 221184));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 221184));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 55296));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 331776));
  allocs.push_back(Allocation(35, 1, 331776));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 55296));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 331776));
  allocs.push_back(Allocation(38, 1, 331776));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 55296));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 331776));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 82944));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 23040));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 138240));
  allocs.push_back(Allocation(44, 1, 138240));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 23040));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 138240));
  allocs.push_back(Allocation(47, 1, 138240));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 23040));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 138240));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 138240));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 46080));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 184320));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4423680);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_224.tflite.
TEST(MemAlloc, testAllocateAllForModel59) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1605632));
  allocs.push_back(Allocation(2, 1, 1605632));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 4816896));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1204224));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 301056));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 1806336));
  allocs.push_back(Allocation(8, 1, 1806336));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 301056));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 1806336));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 451584));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 100352));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 602112));
  allocs.push_back(Allocation(14, 1, 602112));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 100352));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 602112));
  allocs.push_back(Allocation(17, 1, 602112));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 100352));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 602112));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 150528));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 50176));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 301056));
  allocs.push_back(Allocation(23, 1, 301056));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 50176));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 301056));
  allocs.push_back(Allocation(26, 1, 301056));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 50176));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 301056));
  allocs.push_back(Allocation(29, 1, 301056));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 50176));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 301056));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 301056));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 75264));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 451584));
  allocs.push_back(Allocation(35, 1, 451584));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 75264));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 451584));
  allocs.push_back(Allocation(38, 1, 451584));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 75264));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 451584));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 112896));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 31360));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 188160));
  allocs.push_back(Allocation(44, 1, 188160));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 31360));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 188160));
  allocs.push_back(Allocation(47, 1, 188160));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 31360));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 188160));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 188160));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 62720));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 250880));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 6021120);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_224_quant.tflite.
TEST(MemAlloc, testAllocateAllForModel60) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 401408));
  allocs.push_back(Allocation(2, 1, 401408));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 200704));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1204224));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 301056));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 75264));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 451584));
  allocs.push_back(Allocation(8, 1, 451584));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 75264));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 75264));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 451584));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 112896));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 25088));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 150528));
  allocs.push_back(Allocation(15, 1, 150528));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 25088));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 25088));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 150528));
  allocs.push_back(Allocation(19, 1, 150528));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 25088));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 25088));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 150528));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 37632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 12544));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 75264));
  allocs.push_back(Allocation(26, 1, 75264));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 12544));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 12544));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 75264));
  allocs.push_back(Allocation(30, 1, 75264));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 12544));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 12544));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 75264));
  allocs.push_back(Allocation(34, 1, 75264));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 12544));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 12544));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 75264));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 75264));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 18816));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 112896));
  allocs.push_back(Allocation(41, 1, 112896));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 18816));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 18816));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 112896));
  allocs.push_back(Allocation(45, 1, 112896));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 1, 18816));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 18816));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 112896));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 28224));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 7840));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 47040));
  allocs.push_back(Allocation(52, 1, 47040));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 7840));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 7840));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 47040));
  allocs.push_back(Allocation(56, 1, 47040));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 7840));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(58, 1, 7840));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 47040));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 47040));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 1, 15680));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(62, 1, 62720));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 1280));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(63, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1505280);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.00_96.tflite.
TEST(MemAlloc, testAllocateAllForModel61) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 294912));
  allocs.push_back(Allocation(2, 1, 294912));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 147456));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 884736));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 221184));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 55296));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 331776));
  allocs.push_back(Allocation(8, 1, 331776));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 55296));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 331776));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 82944));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 18432));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 110592));
  allocs.push_back(Allocation(14, 1, 110592));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 18432));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 110592));
  allocs.push_back(Allocation(17, 1, 110592));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 18432));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 110592));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 27648));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 9216));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 55296));
  allocs.push_back(Allocation(23, 1, 55296));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 9216));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 55296));
  allocs.push_back(Allocation(26, 1, 55296));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 9216));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 55296));
  allocs.push_back(Allocation(29, 1, 55296));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 9216));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 55296));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 55296));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 13824));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 82944));
  allocs.push_back(Allocation(35, 1, 82944));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 13824));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 82944));
  allocs.push_back(Allocation(38, 1, 82944));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 13824));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 82944));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 20736));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 5760));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 34560));
  allocs.push_back(Allocation(44, 1, 34560));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 5760));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 34560));
  allocs.push_back(Allocation(47, 1, 34560));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 5760));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 34560));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 34560));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 11520));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 46080));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 5120));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 1105920);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.30_224.tflite.
TEST(MemAlloc, testAllocateAllForModel62) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2007040));
  allocs.push_back(Allocation(2, 1, 2007040));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1204224));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 7225344));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1806336));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 401408));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2408448));
  allocs.push_back(Allocation(8, 1, 2408448));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 401408));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 2408448));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 602112));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 125440));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 752640));
  allocs.push_back(Allocation(14, 1, 752640));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 125440));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 752640));
  allocs.push_back(Allocation(17, 1, 752640));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 125440));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 752640));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 188160));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 62720));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 376320));
  allocs.push_back(Allocation(23, 1, 376320));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 62720));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 376320));
  allocs.push_back(Allocation(26, 1, 376320));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 62720));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 376320));
  allocs.push_back(Allocation(29, 1, 376320));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 62720));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 376320));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 376320));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 100352));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 602112));
  allocs.push_back(Allocation(35, 1, 602112));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 100352));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 602112));
  allocs.push_back(Allocation(38, 1, 602112));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 100352));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 602112));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 150528));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 40768));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 244608));
  allocs.push_back(Allocation(44, 1, 244608));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 40768));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 244608));
  allocs.push_back(Allocation(47, 1, 244608));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 40768));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 244608));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 244608));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 81536));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 326144));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 6656));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 9031680);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_1.40_224.tflite.
TEST(MemAlloc, testAllocateAllForModel63) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2408448));
  allocs.push_back(Allocation(2, 1, 2408448));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 1204224));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 7225344));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 1806336));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 401408));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2408448));
  allocs.push_back(Allocation(8, 1, 2408448));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 401408));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(10, 1, 2408448));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 602112));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 150528));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 903168));
  allocs.push_back(Allocation(14, 1, 903168));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 150528));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(16, 1, 903168));
  allocs.push_back(Allocation(17, 1, 903168));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 150528));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(19, 1, 903168));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 225792));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 68992));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 413952));
  allocs.push_back(Allocation(23, 1, 413952));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 68992));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(25, 1, 413952));
  allocs.push_back(Allocation(26, 1, 413952));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 68992));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(28, 1, 413952));
  allocs.push_back(Allocation(29, 1, 413952));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 68992));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(31, 1, 413952));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 413952));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 106624));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 639744));
  allocs.push_back(Allocation(35, 1, 639744));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 106624));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 639744));
  allocs.push_back(Allocation(38, 1, 639744));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 106624));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 639744));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 159936));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 43904));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 263424));
  allocs.push_back(Allocation(44, 1, 263424));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 43904));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 263424));
  allocs.push_back(Allocation(47, 1, 263424));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 43904));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 263424));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(50, 1, 263424));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 87808));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 351232));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 7168));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 4004));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 9031680);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model mobilenet_v2_ssd_lite.onnx.
TEST(MemAlloc, testAllocateAllForModel64) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1080000));
  allocs.push_back(Allocation(2, 1, 2880000));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 2880000));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 1440000));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 8640000));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 2160000));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 540000));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 3240000));
  allocs.push_back(Allocation(9, 1, 3240000));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 540000));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(11, 1, 3240000));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(12, 1, 831744));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 184832));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 1108992));
  allocs.push_back(Allocation(15, 1, 1108992));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 184832));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 1, 1108992));
  allocs.push_back(Allocation(18, 1, 1108992));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 184832));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(20, 1, 1108992));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(21, 1, 277248));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 92416));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 554496));
  allocs.push_back(Allocation(24, 1, 554496));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 92416));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(26, 1, 554496));
  allocs.push_back(Allocation(27, 1, 554496));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 92416));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 1, 554496));
  allocs.push_back(Allocation(30, 1, 554496));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 92416));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(32, 1, 554496));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(33, 1, 554496));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 138624));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 831744));
  allocs.push_back(Allocation(36, 1, 831744));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 138624));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(38, 1, 831744));
  allocs.push_back(Allocation(39, 1, 831744));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 138624));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(41, 1, 831744));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(42, 1, 230400));
  allocs.push_back(Allocation(43, 1, 64000));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 384000));
  allocs.push_back(Allocation(45, 1, 384000));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 1, 64000));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(47, 1, 384000));
  allocs.push_back(Allocation(48, 1, 384000));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 64000));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(50, 1, 384000));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(51, 1, 384000));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 128000));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 512000));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 102400));
  allocs.push_back(Allocation(55, 1, 25600));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 51200));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 12800));
  allocs.push_back(Allocation(58, 1, 4608));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 9216));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 4608));
  allocs.push_back(Allocation(61, 1, 2048));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(62, 1, 4096));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 1024));
  allocs.push_back(Allocation(64, 1, 256));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(65, 1, 256));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 504));
  allocs.push_back(Allocation(67, 1, 4096));
  allocs.push_back(Allocation(68, 1, 2016));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 9216));
  allocs.push_back(Allocation(70, 1, 4536));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(71, 1, 51200));
  allocs.push_back(Allocation(72, 1, 12600));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(73, 1, 512000));
  allocs.push_back(Allocation(74, 1, 50400));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 831744));
  allocs.push_back(Allocation(76, 1, 181944));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(77, 1, 252000));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(78, 1, 96));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(79, 1, 4096));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(80, 1, 384));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 9216));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(82, 1, 864));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(83, 1, 51200));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(84, 1, 2400));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(85, 1, 512000));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(86, 1, 9600));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 831744));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(88, 1, 34656));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(89, 1, 48000));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(90, 1, 24000));
  allocs.push_back(Allocation(91, 1, 24000));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(92, 1, 24000));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(90, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 10800000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet101_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel65) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 3211264));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 3211264));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 3211264));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 1605632));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1605632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(24, 1, 401408));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 1605632));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(27, 1, 200704));
  allocs.push_back(Allocation(28, 1, 200704));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 802816));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 802816));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(31, 1, 200704));
  allocs.push_back(Allocation(32, 1, 200704));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(35, 1, 200704));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 200704));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 802816));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 200704));
  allocs.push_back(Allocation(41, 1, 200704));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 802816));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(44, 1, 200704));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 200704));
  allocs.push_back(Allocation(47, 1, 200704));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 802816));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 200704));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 802816));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(52, 1, 200704));
  allocs.push_back(Allocation(53, 1, 200704));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 802816));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(55, 1, 200704));
  allocs.push_back(Allocation(56, 1, 200704));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 802816));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(58, 1, 200704));
  allocs.push_back(Allocation(59, 1, 200704));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 802816));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(61, 1, 200704));
  allocs.push_back(Allocation(62, 1, 200704));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 802816));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(64, 1, 200704));
  allocs.push_back(Allocation(65, 1, 200704));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 802816));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(67, 1, 200704));
  allocs.push_back(Allocation(68, 1, 200704));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 802816));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(70, 1, 200704));
  allocs.push_back(Allocation(71, 1, 200704));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 802816));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(73, 1, 200704));
  allocs.push_back(Allocation(74, 1, 200704));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 802816));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(76, 1, 200704));
  allocs.push_back(Allocation(77, 1, 200704));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(78, 1, 802816));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(79, 1, 200704));
  allocs.push_back(Allocation(80, 1, 200704));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 802816));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(82, 1, 200704));
  allocs.push_back(Allocation(83, 1, 200704));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 802816));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(85, 1, 200704));
  allocs.push_back(Allocation(86, 1, 200704));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 802816));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(88, 1, 200704));
  allocs.push_back(Allocation(89, 1, 200704));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(90, 1, 802816));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(91, 1, 200704));
  allocs.push_back(Allocation(92, 1, 200704));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(93, 1, 802816));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(94, 1, 200704));
  allocs.push_back(Allocation(95, 1, 200704));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(96, 1, 802816));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(97, 1, 100352));
  allocs.push_back(Allocation(98, 1, 100352));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 401408));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(100, 1, 401408));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(101, 1, 100352));
  allocs.push_back(Allocation(102, 1, 100352));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(103, 1, 401408));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(104, 1, 100352));
  allocs.push_back(Allocation(105, 1, 100352));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(106, 1, 401408));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(107, 1, 8192));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(107, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 7225344);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet101_v2.onnx.
TEST(MemAlloc, testAllocateAllForModel66) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 602112));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 3211264));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(9, 1, 3211264));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 3211264));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(14, 1, 802816));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 802816));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 3211264));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 1605632));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 1, 1605632));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 401408));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 1605632));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(25, 1, 1605632));
  allocs.push_back(Allocation(26, 1, 401408));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 401408));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1605632));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(29, 1, 1605632));
  allocs.push_back(Allocation(30, 1, 401408));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 401408));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1605632));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 802816));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 802816));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 200704));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 802816));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(41, 1, 802816));
  allocs.push_back(Allocation(42, 1, 200704));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 802816));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(46, 1, 200704));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 200704));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 802816));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(49, 1, 802816));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 200704));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 802816));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(53, 1, 802816));
  allocs.push_back(Allocation(54, 1, 200704));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 200704));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 802816));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(57, 1, 802816));
  allocs.push_back(Allocation(58, 1, 200704));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 200704));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 802816));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(61, 1, 802816));
  allocs.push_back(Allocation(62, 1, 200704));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 200704));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 802816));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(65, 1, 802816));
  allocs.push_back(Allocation(66, 1, 200704));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 1, 200704));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 802816));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(69, 1, 802816));
  allocs.push_back(Allocation(70, 1, 200704));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(71, 1, 200704));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 802816));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(73, 1, 802816));
  allocs.push_back(Allocation(74, 1, 200704));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 200704));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 802816));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(77, 1, 802816));
  allocs.push_back(Allocation(78, 1, 200704));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(79, 1, 200704));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(80, 1, 802816));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(81, 1, 802816));
  allocs.push_back(Allocation(82, 1, 200704));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(83, 1, 200704));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 802816));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(85, 1, 802816));
  allocs.push_back(Allocation(86, 1, 200704));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 200704));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(88, 1, 802816));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(89, 1, 802816));
  allocs.push_back(Allocation(90, 1, 200704));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(91, 1, 200704));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(92, 1, 802816));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(93, 1, 802816));
  allocs.push_back(Allocation(94, 1, 200704));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(95, 1, 200704));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(96, 1, 802816));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(97, 1, 802816));
  allocs.push_back(Allocation(98, 1, 200704));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 200704));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(100, 1, 802816));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(101, 1, 802816));
  allocs.push_back(Allocation(102, 1, 200704));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(103, 1, 200704));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(104, 1, 802816));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(105, 1, 802816));
  allocs.push_back(Allocation(106, 1, 200704));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(107, 1, 200704));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(108, 1, 802816));
  allocs.push_back(Allocation(107, 0, 0));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(109, 1, 802816));
  allocs.push_back(Allocation(110, 1, 200704));
  allocs.push_back(Allocation(109, 0, 0));
  allocs.push_back(Allocation(111, 1, 200704));
  allocs.push_back(Allocation(110, 0, 0));
  allocs.push_back(Allocation(112, 1, 802816));
  allocs.push_back(Allocation(111, 0, 0));
  allocs.push_back(Allocation(108, 0, 0));
  allocs.push_back(Allocation(113, 1, 802816));
  allocs.push_back(Allocation(114, 1, 200704));
  allocs.push_back(Allocation(113, 0, 0));
  allocs.push_back(Allocation(115, 1, 200704));
  allocs.push_back(Allocation(114, 0, 0));
  allocs.push_back(Allocation(116, 1, 802816));
  allocs.push_back(Allocation(115, 0, 0));
  allocs.push_back(Allocation(112, 0, 0));
  allocs.push_back(Allocation(117, 1, 802816));
  allocs.push_back(Allocation(118, 1, 200704));
  allocs.push_back(Allocation(117, 0, 0));
  allocs.push_back(Allocation(119, 1, 200704));
  allocs.push_back(Allocation(118, 0, 0));
  allocs.push_back(Allocation(120, 1, 802816));
  allocs.push_back(Allocation(119, 0, 0));
  allocs.push_back(Allocation(116, 0, 0));
  allocs.push_back(Allocation(121, 1, 802816));
  allocs.push_back(Allocation(122, 1, 200704));
  allocs.push_back(Allocation(121, 0, 0));
  allocs.push_back(Allocation(123, 1, 200704));
  allocs.push_back(Allocation(122, 0, 0));
  allocs.push_back(Allocation(124, 1, 802816));
  allocs.push_back(Allocation(123, 0, 0));
  allocs.push_back(Allocation(120, 0, 0));
  allocs.push_back(Allocation(125, 1, 401408));
  allocs.push_back(Allocation(126, 1, 100352));
  allocs.push_back(Allocation(125, 0, 0));
  allocs.push_back(Allocation(127, 1, 401408));
  allocs.push_back(Allocation(126, 0, 0));
  allocs.push_back(Allocation(128, 1, 401408));
  allocs.push_back(Allocation(124, 0, 0));
  allocs.push_back(Allocation(128, 0, 0));
  allocs.push_back(Allocation(129, 1, 401408));
  allocs.push_back(Allocation(130, 1, 100352));
  allocs.push_back(Allocation(129, 0, 0));
  allocs.push_back(Allocation(131, 1, 100352));
  allocs.push_back(Allocation(130, 0, 0));
  allocs.push_back(Allocation(132, 1, 401408));
  allocs.push_back(Allocation(131, 0, 0));
  allocs.push_back(Allocation(127, 0, 0));
  allocs.push_back(Allocation(133, 1, 401408));
  allocs.push_back(Allocation(134, 1, 100352));
  allocs.push_back(Allocation(133, 0, 0));
  allocs.push_back(Allocation(135, 1, 100352));
  allocs.push_back(Allocation(134, 0, 0));
  allocs.push_back(Allocation(136, 1, 401408));
  allocs.push_back(Allocation(135, 0, 0));
  allocs.push_back(Allocation(132, 0, 0));
  allocs.push_back(Allocation(137, 1, 8192));
  allocs.push_back(Allocation(136, 0, 0));
  allocs.push_back(Allocation(137, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8028160);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 0.900000);
}

/// Test memory allocation for model resnet152_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel67) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 3211264));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 3211264));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 3211264));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 1605632));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1605632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(24, 1, 401408));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 1605632));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(27, 1, 401408));
  allocs.push_back(Allocation(28, 1, 401408));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 1605632));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(30, 1, 401408));
  allocs.push_back(Allocation(31, 1, 401408));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1605632));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(33, 1, 401408));
  allocs.push_back(Allocation(34, 1, 401408));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 1605632));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(36, 1, 401408));
  allocs.push_back(Allocation(37, 1, 401408));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 1605632));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(39, 1, 200704));
  allocs.push_back(Allocation(40, 1, 200704));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 802816));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 802816));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(44, 1, 200704));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(46, 1, 200704));
  allocs.push_back(Allocation(47, 1, 200704));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 802816));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 1, 200704));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 802816));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(52, 1, 200704));
  allocs.push_back(Allocation(53, 1, 200704));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 802816));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(55, 1, 200704));
  allocs.push_back(Allocation(56, 1, 200704));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 802816));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(58, 1, 200704));
  allocs.push_back(Allocation(59, 1, 200704));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 802816));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(61, 1, 200704));
  allocs.push_back(Allocation(62, 1, 200704));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 802816));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(64, 1, 200704));
  allocs.push_back(Allocation(65, 1, 200704));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 802816));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(67, 1, 200704));
  allocs.push_back(Allocation(68, 1, 200704));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 802816));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(70, 1, 200704));
  allocs.push_back(Allocation(71, 1, 200704));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 802816));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(73, 1, 200704));
  allocs.push_back(Allocation(74, 1, 200704));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 802816));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(76, 1, 200704));
  allocs.push_back(Allocation(77, 1, 200704));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(78, 1, 802816));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(79, 1, 200704));
  allocs.push_back(Allocation(80, 1, 200704));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 802816));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(82, 1, 200704));
  allocs.push_back(Allocation(83, 1, 200704));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 802816));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(85, 1, 200704));
  allocs.push_back(Allocation(86, 1, 200704));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 802816));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(88, 1, 200704));
  allocs.push_back(Allocation(89, 1, 200704));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(90, 1, 802816));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(91, 1, 200704));
  allocs.push_back(Allocation(92, 1, 200704));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(93, 1, 802816));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(94, 1, 200704));
  allocs.push_back(Allocation(95, 1, 200704));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(96, 1, 802816));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(97, 1, 200704));
  allocs.push_back(Allocation(98, 1, 200704));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 802816));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(100, 1, 200704));
  allocs.push_back(Allocation(101, 1, 200704));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(102, 1, 802816));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(103, 1, 200704));
  allocs.push_back(Allocation(104, 1, 200704));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(105, 1, 802816));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(106, 1, 200704));
  allocs.push_back(Allocation(107, 1, 200704));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(108, 1, 802816));
  allocs.push_back(Allocation(107, 0, 0));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(109, 1, 200704));
  allocs.push_back(Allocation(110, 1, 200704));
  allocs.push_back(Allocation(109, 0, 0));
  allocs.push_back(Allocation(111, 1, 802816));
  allocs.push_back(Allocation(110, 0, 0));
  allocs.push_back(Allocation(108, 0, 0));
  allocs.push_back(Allocation(112, 1, 200704));
  allocs.push_back(Allocation(113, 1, 200704));
  allocs.push_back(Allocation(112, 0, 0));
  allocs.push_back(Allocation(114, 1, 802816));
  allocs.push_back(Allocation(113, 0, 0));
  allocs.push_back(Allocation(111, 0, 0));
  allocs.push_back(Allocation(115, 1, 200704));
  allocs.push_back(Allocation(116, 1, 200704));
  allocs.push_back(Allocation(115, 0, 0));
  allocs.push_back(Allocation(117, 1, 802816));
  allocs.push_back(Allocation(116, 0, 0));
  allocs.push_back(Allocation(114, 0, 0));
  allocs.push_back(Allocation(118, 1, 200704));
  allocs.push_back(Allocation(119, 1, 200704));
  allocs.push_back(Allocation(118, 0, 0));
  allocs.push_back(Allocation(120, 1, 802816));
  allocs.push_back(Allocation(119, 0, 0));
  allocs.push_back(Allocation(117, 0, 0));
  allocs.push_back(Allocation(121, 1, 200704));
  allocs.push_back(Allocation(122, 1, 200704));
  allocs.push_back(Allocation(121, 0, 0));
  allocs.push_back(Allocation(123, 1, 802816));
  allocs.push_back(Allocation(122, 0, 0));
  allocs.push_back(Allocation(120, 0, 0));
  allocs.push_back(Allocation(124, 1, 200704));
  allocs.push_back(Allocation(125, 1, 200704));
  allocs.push_back(Allocation(124, 0, 0));
  allocs.push_back(Allocation(126, 1, 802816));
  allocs.push_back(Allocation(125, 0, 0));
  allocs.push_back(Allocation(123, 0, 0));
  allocs.push_back(Allocation(127, 1, 200704));
  allocs.push_back(Allocation(128, 1, 200704));
  allocs.push_back(Allocation(127, 0, 0));
  allocs.push_back(Allocation(129, 1, 802816));
  allocs.push_back(Allocation(128, 0, 0));
  allocs.push_back(Allocation(126, 0, 0));
  allocs.push_back(Allocation(130, 1, 200704));
  allocs.push_back(Allocation(131, 1, 200704));
  allocs.push_back(Allocation(130, 0, 0));
  allocs.push_back(Allocation(132, 1, 802816));
  allocs.push_back(Allocation(131, 0, 0));
  allocs.push_back(Allocation(129, 0, 0));
  allocs.push_back(Allocation(133, 1, 200704));
  allocs.push_back(Allocation(134, 1, 200704));
  allocs.push_back(Allocation(133, 0, 0));
  allocs.push_back(Allocation(135, 1, 802816));
  allocs.push_back(Allocation(134, 0, 0));
  allocs.push_back(Allocation(132, 0, 0));
  allocs.push_back(Allocation(136, 1, 200704));
  allocs.push_back(Allocation(137, 1, 200704));
  allocs.push_back(Allocation(136, 0, 0));
  allocs.push_back(Allocation(138, 1, 802816));
  allocs.push_back(Allocation(137, 0, 0));
  allocs.push_back(Allocation(135, 0, 0));
  allocs.push_back(Allocation(139, 1, 200704));
  allocs.push_back(Allocation(140, 1, 200704));
  allocs.push_back(Allocation(139, 0, 0));
  allocs.push_back(Allocation(141, 1, 802816));
  allocs.push_back(Allocation(140, 0, 0));
  allocs.push_back(Allocation(138, 0, 0));
  allocs.push_back(Allocation(142, 1, 200704));
  allocs.push_back(Allocation(143, 1, 200704));
  allocs.push_back(Allocation(142, 0, 0));
  allocs.push_back(Allocation(144, 1, 802816));
  allocs.push_back(Allocation(143, 0, 0));
  allocs.push_back(Allocation(141, 0, 0));
  allocs.push_back(Allocation(145, 1, 200704));
  allocs.push_back(Allocation(146, 1, 200704));
  allocs.push_back(Allocation(145, 0, 0));
  allocs.push_back(Allocation(147, 1, 802816));
  allocs.push_back(Allocation(146, 0, 0));
  allocs.push_back(Allocation(144, 0, 0));
  allocs.push_back(Allocation(148, 1, 100352));
  allocs.push_back(Allocation(149, 1, 100352));
  allocs.push_back(Allocation(148, 0, 0));
  allocs.push_back(Allocation(150, 1, 401408));
  allocs.push_back(Allocation(149, 0, 0));
  allocs.push_back(Allocation(151, 1, 401408));
  allocs.push_back(Allocation(147, 0, 0));
  allocs.push_back(Allocation(151, 0, 0));
  allocs.push_back(Allocation(152, 1, 100352));
  allocs.push_back(Allocation(153, 1, 100352));
  allocs.push_back(Allocation(152, 0, 0));
  allocs.push_back(Allocation(154, 1, 401408));
  allocs.push_back(Allocation(153, 0, 0));
  allocs.push_back(Allocation(150, 0, 0));
  allocs.push_back(Allocation(155, 1, 100352));
  allocs.push_back(Allocation(156, 1, 100352));
  allocs.push_back(Allocation(155, 0, 0));
  allocs.push_back(Allocation(157, 1, 401408));
  allocs.push_back(Allocation(156, 0, 0));
  allocs.push_back(Allocation(154, 0, 0));
  allocs.push_back(Allocation(158, 1, 8192));
  allocs.push_back(Allocation(157, 0, 0));
  allocs.push_back(Allocation(158, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 7225344);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet152_v2.onnx.
TEST(MemAlloc, testAllocateAllForModel68) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 602112));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 3211264));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(9, 1, 3211264));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 3211264));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(14, 1, 802816));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 802816));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 3211264));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 1605632));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 1, 1605632));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 401408));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 1605632));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(25, 1, 1605632));
  allocs.push_back(Allocation(26, 1, 401408));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 401408));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1605632));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(29, 1, 1605632));
  allocs.push_back(Allocation(30, 1, 401408));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 401408));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1605632));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(33, 1, 1605632));
  allocs.push_back(Allocation(34, 1, 401408));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 401408));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 1605632));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(37, 1, 1605632));
  allocs.push_back(Allocation(38, 1, 401408));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 401408));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 1605632));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(41, 1, 1605632));
  allocs.push_back(Allocation(42, 1, 401408));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 401408));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 1605632));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(45, 1, 1605632));
  allocs.push_back(Allocation(46, 1, 401408));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 401408));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 1605632));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(49, 1, 802816));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 802816));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 802816));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(53, 1, 802816));
  allocs.push_back(Allocation(54, 1, 200704));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 200704));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 802816));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(57, 1, 802816));
  allocs.push_back(Allocation(58, 1, 200704));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 200704));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 802816));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(61, 1, 802816));
  allocs.push_back(Allocation(62, 1, 200704));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 200704));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 802816));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(65, 1, 802816));
  allocs.push_back(Allocation(66, 1, 200704));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 1, 200704));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 802816));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(69, 1, 802816));
  allocs.push_back(Allocation(70, 1, 200704));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(71, 1, 200704));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 802816));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(73, 1, 802816));
  allocs.push_back(Allocation(74, 1, 200704));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 200704));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 802816));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(77, 1, 802816));
  allocs.push_back(Allocation(78, 1, 200704));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(79, 1, 200704));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(80, 1, 802816));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(81, 1, 802816));
  allocs.push_back(Allocation(82, 1, 200704));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(83, 1, 200704));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 802816));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(85, 1, 802816));
  allocs.push_back(Allocation(86, 1, 200704));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 200704));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(88, 1, 802816));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(89, 1, 802816));
  allocs.push_back(Allocation(90, 1, 200704));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(91, 1, 200704));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(92, 1, 802816));
  allocs.push_back(Allocation(91, 0, 0));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(93, 1, 802816));
  allocs.push_back(Allocation(94, 1, 200704));
  allocs.push_back(Allocation(93, 0, 0));
  allocs.push_back(Allocation(95, 1, 200704));
  allocs.push_back(Allocation(94, 0, 0));
  allocs.push_back(Allocation(96, 1, 802816));
  allocs.push_back(Allocation(95, 0, 0));
  allocs.push_back(Allocation(92, 0, 0));
  allocs.push_back(Allocation(97, 1, 802816));
  allocs.push_back(Allocation(98, 1, 200704));
  allocs.push_back(Allocation(97, 0, 0));
  allocs.push_back(Allocation(99, 1, 200704));
  allocs.push_back(Allocation(98, 0, 0));
  allocs.push_back(Allocation(100, 1, 802816));
  allocs.push_back(Allocation(99, 0, 0));
  allocs.push_back(Allocation(96, 0, 0));
  allocs.push_back(Allocation(101, 1, 802816));
  allocs.push_back(Allocation(102, 1, 200704));
  allocs.push_back(Allocation(101, 0, 0));
  allocs.push_back(Allocation(103, 1, 200704));
  allocs.push_back(Allocation(102, 0, 0));
  allocs.push_back(Allocation(104, 1, 802816));
  allocs.push_back(Allocation(103, 0, 0));
  allocs.push_back(Allocation(100, 0, 0));
  allocs.push_back(Allocation(105, 1, 802816));
  allocs.push_back(Allocation(106, 1, 200704));
  allocs.push_back(Allocation(105, 0, 0));
  allocs.push_back(Allocation(107, 1, 200704));
  allocs.push_back(Allocation(106, 0, 0));
  allocs.push_back(Allocation(108, 1, 802816));
  allocs.push_back(Allocation(107, 0, 0));
  allocs.push_back(Allocation(104, 0, 0));
  allocs.push_back(Allocation(109, 1, 802816));
  allocs.push_back(Allocation(110, 1, 200704));
  allocs.push_back(Allocation(109, 0, 0));
  allocs.push_back(Allocation(111, 1, 200704));
  allocs.push_back(Allocation(110, 0, 0));
  allocs.push_back(Allocation(112, 1, 802816));
  allocs.push_back(Allocation(111, 0, 0));
  allocs.push_back(Allocation(108, 0, 0));
  allocs.push_back(Allocation(113, 1, 802816));
  allocs.push_back(Allocation(114, 1, 200704));
  allocs.push_back(Allocation(113, 0, 0));
  allocs.push_back(Allocation(115, 1, 200704));
  allocs.push_back(Allocation(114, 0, 0));
  allocs.push_back(Allocation(116, 1, 802816));
  allocs.push_back(Allocation(115, 0, 0));
  allocs.push_back(Allocation(112, 0, 0));
  allocs.push_back(Allocation(117, 1, 802816));
  allocs.push_back(Allocation(118, 1, 200704));
  allocs.push_back(Allocation(117, 0, 0));
  allocs.push_back(Allocation(119, 1, 200704));
  allocs.push_back(Allocation(118, 0, 0));
  allocs.push_back(Allocation(120, 1, 802816));
  allocs.push_back(Allocation(119, 0, 0));
  allocs.push_back(Allocation(116, 0, 0));
  allocs.push_back(Allocation(121, 1, 802816));
  allocs.push_back(Allocation(122, 1, 200704));
  allocs.push_back(Allocation(121, 0, 0));
  allocs.push_back(Allocation(123, 1, 200704));
  allocs.push_back(Allocation(122, 0, 0));
  allocs.push_back(Allocation(124, 1, 802816));
  allocs.push_back(Allocation(123, 0, 0));
  allocs.push_back(Allocation(120, 0, 0));
  allocs.push_back(Allocation(125, 1, 802816));
  allocs.push_back(Allocation(126, 1, 200704));
  allocs.push_back(Allocation(125, 0, 0));
  allocs.push_back(Allocation(127, 1, 200704));
  allocs.push_back(Allocation(126, 0, 0));
  allocs.push_back(Allocation(128, 1, 802816));
  allocs.push_back(Allocation(127, 0, 0));
  allocs.push_back(Allocation(124, 0, 0));
  allocs.push_back(Allocation(129, 1, 802816));
  allocs.push_back(Allocation(130, 1, 200704));
  allocs.push_back(Allocation(129, 0, 0));
  allocs.push_back(Allocation(131, 1, 200704));
  allocs.push_back(Allocation(130, 0, 0));
  allocs.push_back(Allocation(132, 1, 802816));
  allocs.push_back(Allocation(131, 0, 0));
  allocs.push_back(Allocation(128, 0, 0));
  allocs.push_back(Allocation(133, 1, 802816));
  allocs.push_back(Allocation(134, 1, 200704));
  allocs.push_back(Allocation(133, 0, 0));
  allocs.push_back(Allocation(135, 1, 200704));
  allocs.push_back(Allocation(134, 0, 0));
  allocs.push_back(Allocation(136, 1, 802816));
  allocs.push_back(Allocation(135, 0, 0));
  allocs.push_back(Allocation(132, 0, 0));
  allocs.push_back(Allocation(137, 1, 802816));
  allocs.push_back(Allocation(138, 1, 200704));
  allocs.push_back(Allocation(137, 0, 0));
  allocs.push_back(Allocation(139, 1, 200704));
  allocs.push_back(Allocation(138, 0, 0));
  allocs.push_back(Allocation(140, 1, 802816));
  allocs.push_back(Allocation(139, 0, 0));
  allocs.push_back(Allocation(136, 0, 0));
  allocs.push_back(Allocation(141, 1, 802816));
  allocs.push_back(Allocation(142, 1, 200704));
  allocs.push_back(Allocation(141, 0, 0));
  allocs.push_back(Allocation(143, 1, 200704));
  allocs.push_back(Allocation(142, 0, 0));
  allocs.push_back(Allocation(144, 1, 802816));
  allocs.push_back(Allocation(143, 0, 0));
  allocs.push_back(Allocation(140, 0, 0));
  allocs.push_back(Allocation(145, 1, 802816));
  allocs.push_back(Allocation(146, 1, 200704));
  allocs.push_back(Allocation(145, 0, 0));
  allocs.push_back(Allocation(147, 1, 200704));
  allocs.push_back(Allocation(146, 0, 0));
  allocs.push_back(Allocation(148, 1, 802816));
  allocs.push_back(Allocation(147, 0, 0));
  allocs.push_back(Allocation(144, 0, 0));
  allocs.push_back(Allocation(149, 1, 802816));
  allocs.push_back(Allocation(150, 1, 200704));
  allocs.push_back(Allocation(149, 0, 0));
  allocs.push_back(Allocation(151, 1, 200704));
  allocs.push_back(Allocation(150, 0, 0));
  allocs.push_back(Allocation(152, 1, 802816));
  allocs.push_back(Allocation(151, 0, 0));
  allocs.push_back(Allocation(148, 0, 0));
  allocs.push_back(Allocation(153, 1, 802816));
  allocs.push_back(Allocation(154, 1, 200704));
  allocs.push_back(Allocation(153, 0, 0));
  allocs.push_back(Allocation(155, 1, 200704));
  allocs.push_back(Allocation(154, 0, 0));
  allocs.push_back(Allocation(156, 1, 802816));
  allocs.push_back(Allocation(155, 0, 0));
  allocs.push_back(Allocation(152, 0, 0));
  allocs.push_back(Allocation(157, 1, 802816));
  allocs.push_back(Allocation(158, 1, 200704));
  allocs.push_back(Allocation(157, 0, 0));
  allocs.push_back(Allocation(159, 1, 200704));
  allocs.push_back(Allocation(158, 0, 0));
  allocs.push_back(Allocation(160, 1, 802816));
  allocs.push_back(Allocation(159, 0, 0));
  allocs.push_back(Allocation(156, 0, 0));
  allocs.push_back(Allocation(161, 1, 802816));
  allocs.push_back(Allocation(162, 1, 200704));
  allocs.push_back(Allocation(161, 0, 0));
  allocs.push_back(Allocation(163, 1, 200704));
  allocs.push_back(Allocation(162, 0, 0));
  allocs.push_back(Allocation(164, 1, 802816));
  allocs.push_back(Allocation(163, 0, 0));
  allocs.push_back(Allocation(160, 0, 0));
  allocs.push_back(Allocation(165, 1, 802816));
  allocs.push_back(Allocation(166, 1, 200704));
  allocs.push_back(Allocation(165, 0, 0));
  allocs.push_back(Allocation(167, 1, 200704));
  allocs.push_back(Allocation(166, 0, 0));
  allocs.push_back(Allocation(168, 1, 802816));
  allocs.push_back(Allocation(167, 0, 0));
  allocs.push_back(Allocation(164, 0, 0));
  allocs.push_back(Allocation(169, 1, 802816));
  allocs.push_back(Allocation(170, 1, 200704));
  allocs.push_back(Allocation(169, 0, 0));
  allocs.push_back(Allocation(171, 1, 200704));
  allocs.push_back(Allocation(170, 0, 0));
  allocs.push_back(Allocation(172, 1, 802816));
  allocs.push_back(Allocation(171, 0, 0));
  allocs.push_back(Allocation(168, 0, 0));
  allocs.push_back(Allocation(173, 1, 802816));
  allocs.push_back(Allocation(174, 1, 200704));
  allocs.push_back(Allocation(173, 0, 0));
  allocs.push_back(Allocation(175, 1, 200704));
  allocs.push_back(Allocation(174, 0, 0));
  allocs.push_back(Allocation(176, 1, 802816));
  allocs.push_back(Allocation(175, 0, 0));
  allocs.push_back(Allocation(172, 0, 0));
  allocs.push_back(Allocation(177, 1, 802816));
  allocs.push_back(Allocation(178, 1, 200704));
  allocs.push_back(Allocation(177, 0, 0));
  allocs.push_back(Allocation(179, 1, 200704));
  allocs.push_back(Allocation(178, 0, 0));
  allocs.push_back(Allocation(180, 1, 802816));
  allocs.push_back(Allocation(179, 0, 0));
  allocs.push_back(Allocation(176, 0, 0));
  allocs.push_back(Allocation(181, 1, 802816));
  allocs.push_back(Allocation(182, 1, 200704));
  allocs.push_back(Allocation(181, 0, 0));
  allocs.push_back(Allocation(183, 1, 200704));
  allocs.push_back(Allocation(182, 0, 0));
  allocs.push_back(Allocation(184, 1, 802816));
  allocs.push_back(Allocation(183, 0, 0));
  allocs.push_back(Allocation(180, 0, 0));
  allocs.push_back(Allocation(185, 1, 802816));
  allocs.push_back(Allocation(186, 1, 200704));
  allocs.push_back(Allocation(185, 0, 0));
  allocs.push_back(Allocation(187, 1, 200704));
  allocs.push_back(Allocation(186, 0, 0));
  allocs.push_back(Allocation(188, 1, 802816));
  allocs.push_back(Allocation(187, 0, 0));
  allocs.push_back(Allocation(184, 0, 0));
  allocs.push_back(Allocation(189, 1, 802816));
  allocs.push_back(Allocation(190, 1, 200704));
  allocs.push_back(Allocation(189, 0, 0));
  allocs.push_back(Allocation(191, 1, 200704));
  allocs.push_back(Allocation(190, 0, 0));
  allocs.push_back(Allocation(192, 1, 802816));
  allocs.push_back(Allocation(191, 0, 0));
  allocs.push_back(Allocation(188, 0, 0));
  allocs.push_back(Allocation(193, 1, 401408));
  allocs.push_back(Allocation(194, 1, 100352));
  allocs.push_back(Allocation(193, 0, 0));
  allocs.push_back(Allocation(195, 1, 401408));
  allocs.push_back(Allocation(194, 0, 0));
  allocs.push_back(Allocation(196, 1, 401408));
  allocs.push_back(Allocation(192, 0, 0));
  allocs.push_back(Allocation(196, 0, 0));
  allocs.push_back(Allocation(197, 1, 401408));
  allocs.push_back(Allocation(198, 1, 100352));
  allocs.push_back(Allocation(197, 0, 0));
  allocs.push_back(Allocation(199, 1, 100352));
  allocs.push_back(Allocation(198, 0, 0));
  allocs.push_back(Allocation(200, 1, 401408));
  allocs.push_back(Allocation(199, 0, 0));
  allocs.push_back(Allocation(195, 0, 0));
  allocs.push_back(Allocation(201, 1, 401408));
  allocs.push_back(Allocation(202, 1, 100352));
  allocs.push_back(Allocation(201, 0, 0));
  allocs.push_back(Allocation(203, 1, 100352));
  allocs.push_back(Allocation(202, 0, 0));
  allocs.push_back(Allocation(204, 1, 401408));
  allocs.push_back(Allocation(203, 0, 0));
  allocs.push_back(Allocation(200, 0, 0));
  allocs.push_back(Allocation(205, 1, 8192));
  allocs.push_back(Allocation(204, 0, 0));
  allocs.push_back(Allocation(205, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8028160);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 0.900000);
}

/// Test memory allocation for model resnet18_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel69) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 3211264));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(7, 1, 802816));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 401408));
  allocs.push_back(Allocation(9, 1, 401408));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(10, 1, 401408));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(11, 1, 401408));
  allocs.push_back(Allocation(12, 1, 401408));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(13, 1, 200704));
  allocs.push_back(Allocation(14, 1, 200704));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(15, 1, 200704));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(16, 1, 200704));
  allocs.push_back(Allocation(17, 1, 200704));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 1, 100352));
  allocs.push_back(Allocation(19, 1, 100352));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(20, 1, 100352));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 1, 100352));
  allocs.push_back(Allocation(22, 1, 100352));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(23, 1, 2048));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4014080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet18_v2.onnx.
TEST(MemAlloc, testAllocateAllForModel70) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 602112));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 802816));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(11, 1, 401408));
  allocs.push_back(Allocation(12, 1, 401408));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 401408));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 401408));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(17, 1, 200704));
  allocs.push_back(Allocation(18, 1, 200704));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 200704));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(20, 1, 200704));
  allocs.push_back(Allocation(21, 1, 200704));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 200704));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(23, 1, 100352));
  allocs.push_back(Allocation(24, 1, 100352));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 100352));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(26, 1, 100352));
  allocs.push_back(Allocation(27, 1, 100352));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 100352));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(29, 1, 2048));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4014080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet34_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel71) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 3211264));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(7, 1, 802816));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(10, 1, 401408));
  allocs.push_back(Allocation(11, 1, 401408));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(12, 1, 401408));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(13, 1, 401408));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(16, 1, 401408));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 1, 401408));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(19, 1, 200704));
  allocs.push_back(Allocation(20, 1, 200704));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(21, 1, 200704));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(22, 1, 200704));
  allocs.push_back(Allocation(23, 1, 200704));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(24, 1, 200704));
  allocs.push_back(Allocation(25, 1, 200704));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(26, 1, 200704));
  allocs.push_back(Allocation(27, 1, 200704));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(28, 1, 200704));
  allocs.push_back(Allocation(29, 1, 200704));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 1, 200704));
  allocs.push_back(Allocation(31, 1, 200704));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(32, 1, 100352));
  allocs.push_back(Allocation(33, 1, 100352));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(34, 1, 100352));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(35, 1, 100352));
  allocs.push_back(Allocation(36, 1, 100352));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 100352));
  allocs.push_back(Allocation(38, 1, 100352));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(39, 1, 2048));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4014080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet34_v2.onnx.
TEST(MemAlloc, testAllocateAllForModel72) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 602112));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 802816));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 802816));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 401408));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 1, 401408));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(20, 1, 401408));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(23, 1, 401408));
  allocs.push_back(Allocation(24, 1, 401408));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(26, 1, 200704));
  allocs.push_back(Allocation(27, 1, 200704));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 200704));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(29, 1, 200704));
  allocs.push_back(Allocation(30, 1, 200704));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 200704));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(32, 1, 200704));
  allocs.push_back(Allocation(33, 1, 200704));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(35, 1, 200704));
  allocs.push_back(Allocation(36, 1, 200704));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 200704));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(39, 1, 200704));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 200704));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(41, 1, 200704));
  allocs.push_back(Allocation(42, 1, 200704));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(44, 1, 100352));
  allocs.push_back(Allocation(45, 1, 100352));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 1, 100352));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(47, 1, 100352));
  allocs.push_back(Allocation(48, 1, 100352));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 100352));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(50, 1, 100352));
  allocs.push_back(Allocation(51, 1, 100352));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 100352));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(53, 1, 2048));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(53, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 4014080);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet50_v1.onnx.
TEST(MemAlloc, testAllocateAllForModel73) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 3211264));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 3211264));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 3211264));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(14, 1, 401408));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 1605632));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1605632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(24, 1, 401408));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 1605632));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(27, 1, 200704));
  allocs.push_back(Allocation(28, 1, 200704));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(29, 1, 802816));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 802816));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(31, 1, 200704));
  allocs.push_back(Allocation(32, 1, 200704));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(35, 1, 200704));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(37, 1, 200704));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 802816));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(40, 1, 200704));
  allocs.push_back(Allocation(41, 1, 200704));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 802816));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(44, 1, 200704));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(46, 1, 100352));
  allocs.push_back(Allocation(47, 1, 100352));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 401408));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 401408));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(50, 1, 100352));
  allocs.push_back(Allocation(51, 1, 100352));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 401408));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(53, 1, 100352));
  allocs.push_back(Allocation(54, 1, 100352));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 401408));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(56, 1, 8192));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 7225344);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet50_v1.tflite.
TEST(MemAlloc, testAllocateAllForModel74) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 3211264));
  allocs.push_back(Allocation(2, 1, 3326976));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 3211264));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 3211264));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(14, 1, 1605632));
  allocs.push_back(Allocation(15, 1, 401408));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(16, 1, 401408));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(19, 1, 401408));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1605632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(24, 1, 401408));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 1605632));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(27, 1, 802816));
  allocs.push_back(Allocation(28, 1, 200704));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(29, 1, 200704));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 802816));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(31, 1, 200704));
  allocs.push_back(Allocation(32, 1, 200704));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(35, 1, 200704));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 200704));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 802816));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(40, 1, 200704));
  allocs.push_back(Allocation(41, 1, 200704));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(42, 1, 802816));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(44, 1, 200704));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(46, 1, 401408));
  allocs.push_back(Allocation(47, 1, 100352));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(48, 1, 100352));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(49, 1, 401408));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(50, 1, 100352));
  allocs.push_back(Allocation(51, 1, 100352));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 401408));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(53, 1, 100352));
  allocs.push_back(Allocation(54, 1, 100352));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 401408));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(56, 1, 57344));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(57, 1, 57344));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(58, 1, 8192));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(59, 1, 8192));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(60, 1, 4000));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 7225344);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model resnet50_v2.onnx.
TEST(MemAlloc, testAllocateAllForModel75) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 602112));
  allocs.push_back(Allocation(2, 1, 602112));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(6, 1, 802816));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 3211264));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(9, 1, 3211264));
  allocs.push_back(Allocation(10, 1, 802816));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 802816));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 3211264));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(13, 1, 3211264));
  allocs.push_back(Allocation(14, 1, 802816));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 802816));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 3211264));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(17, 1, 1605632));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 1605632));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(21, 1, 1605632));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 401408));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 1605632));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(25, 1, 1605632));
  allocs.push_back(Allocation(26, 1, 401408));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 401408));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 1605632));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(29, 1, 1605632));
  allocs.push_back(Allocation(30, 1, 401408));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 401408));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1605632));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(35, 1, 802816));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 802816));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 200704));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 802816));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(41, 1, 802816));
  allocs.push_back(Allocation(42, 1, 200704));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 802816));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(46, 1, 200704));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 200704));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 802816));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(49, 1, 802816));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 200704));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 802816));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(53, 1, 802816));
  allocs.push_back(Allocation(54, 1, 200704));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 200704));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 802816));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(57, 1, 401408));
  allocs.push_back(Allocation(58, 1, 100352));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 401408));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 401408));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(61, 1, 401408));
  allocs.push_back(Allocation(62, 1, 100352));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(63, 1, 100352));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 401408));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(65, 1, 401408));
  allocs.push_back(Allocation(66, 1, 100352));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 1, 100352));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 401408));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(69, 1, 8192));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(69, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 8028160);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 0.900000);
}

/// Test memory allocation for model resnet50_v2.tflite.
TEST(MemAlloc, testAllocateAllForModel76) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 3211264));
  allocs.push_back(Allocation(2, 1, 802816));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 3211264));
  allocs.push_back(Allocation(4, 1, 802816));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(5, 1, 802816));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 3211264));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(7, 1, 3211264));
  allocs.push_back(Allocation(8, 1, 802816));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 802816));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 3211264));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(11, 1, 3211264));
  allocs.push_back(Allocation(12, 1, 802816));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 200704));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 802816));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 802816));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 1605632));
  allocs.push_back(Allocation(17, 1, 401408));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(18, 1, 401408));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 1605632));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(20, 1, 1605632));
  allocs.push_back(Allocation(21, 1, 401408));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 401408));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1605632));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(24, 1, 1605632));
  allocs.push_back(Allocation(25, 1, 401408));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 401408));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 1605632));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(28, 1, 1605632));
  allocs.push_back(Allocation(29, 1, 401408));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 100352));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 401408));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 401408));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 802816));
  allocs.push_back(Allocation(34, 1, 200704));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(35, 1, 200704));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(36, 1, 802816));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 802816));
  allocs.push_back(Allocation(38, 1, 200704));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 200704));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 802816));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(41, 1, 802816));
  allocs.push_back(Allocation(42, 1, 200704));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(43, 1, 200704));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 802816));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(45, 1, 802816));
  allocs.push_back(Allocation(46, 1, 200704));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 200704));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 802816));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(49, 1, 802816));
  allocs.push_back(Allocation(50, 1, 200704));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 200704));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 802816));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(53, 1, 802816));
  allocs.push_back(Allocation(54, 1, 200704));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 50176));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(56, 1, 200704));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(57, 1, 200704));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(58, 1, 401408));
  allocs.push_back(Allocation(59, 1, 100352));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(60, 1, 100352));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 1, 401408));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(62, 1, 401408));
  allocs.push_back(Allocation(63, 1, 100352));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(64, 1, 100352));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(65, 1, 401408));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(66, 1, 401408));
  allocs.push_back(Allocation(67, 1, 100352));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 100352));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 401408));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(70, 1, 57344));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(71, 1, 57344));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(72, 1, 8192));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(73, 1, 8192));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(74, 1, 4004));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(74, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 7225344);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model vgg16_ssd.onnx.
TEST(MemAlloc, testAllocateAllForModel77) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 1080000));
  allocs.push_back(Allocation(2, 1, 23040000));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 23040000));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 5760000));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 11520000));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 11520000));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2880000));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 5760000));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 5760000));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 5760000));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 1478656));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 2957312));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 2957312));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 2957312));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 739328));
  allocs.push_back(Allocation(16, 1, 739328));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 739328));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 739328));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 739328));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1478656));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(21, 1, 1478656));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(22, 1, 369664));
  allocs.push_back(Allocation(23, 1, 204800));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 51200));
  allocs.push_back(Allocation(25, 1, 25600));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 12800));
  allocs.push_back(Allocation(27, 1, 9216));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(28, 1, 4608));
  allocs.push_back(Allocation(29, 1, 1024));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 336));
  allocs.push_back(Allocation(31, 1, 3024));
  allocs.push_back(Allocation(32, 1, 12600));
  allocs.push_back(Allocation(33, 1, 50400));
  allocs.push_back(Allocation(34, 1, 181944));
  allocs.push_back(Allocation(35, 1, 485184));
  allocs.push_back(Allocation(36, 1, 733488));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(37, 1, 64));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(38, 1, 576));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(39, 1, 2400));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(40, 1, 9600));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(41, 1, 34656));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(42, 1, 92416));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(43, 1, 139712));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(44, 1, 69856));
  allocs.push_back(Allocation(45, 1, 69856));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(46, 1, 69856));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(44, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 46080000);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model xception.tflite.
TEST(MemAlloc, testAllocateAllForModel78) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2841728));
  allocs.push_back(Allocation(2, 1, 5531904));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 5531904));
  allocs.push_back(Allocation(4, 1, 11063808));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 11063808));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 11063808));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2803712));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 2803712));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(9, 1, 1401856));
  allocs.push_back(Allocation(10, 1, 2803712));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(11, 1, 5607424));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 5607424));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 5607424));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 1401856));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(15, 1, 1051232));
  allocs.push_back(Allocation(16, 1, 1401856));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(17, 1, 3986528));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(18, 1, 3986528));
  allocs.push_back(Allocation(17, 0, 0));
  allocs.push_back(Allocation(19, 1, 3986528));
  allocs.push_back(Allocation(18, 0, 0));
  allocs.push_back(Allocation(20, 1, 1051232));
  allocs.push_back(Allocation(19, 0, 0));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(21, 1, 1051232));
  allocs.push_back(Allocation(22, 1, 1051232));
  allocs.push_back(Allocation(21, 0, 0));
  allocs.push_back(Allocation(23, 1, 1051232));
  allocs.push_back(Allocation(22, 0, 0));
  allocs.push_back(Allocation(24, 1, 1051232));
  allocs.push_back(Allocation(23, 0, 0));
  allocs.push_back(Allocation(25, 1, 1051232));
  allocs.push_back(Allocation(24, 0, 0));
  allocs.push_back(Allocation(26, 1, 1051232));
  allocs.push_back(Allocation(25, 0, 0));
  allocs.push_back(Allocation(27, 1, 1051232));
  allocs.push_back(Allocation(26, 0, 0));
  allocs.push_back(Allocation(20, 0, 0));
  allocs.push_back(Allocation(28, 1, 1051232));
  allocs.push_back(Allocation(29, 1, 1051232));
  allocs.push_back(Allocation(28, 0, 0));
  allocs.push_back(Allocation(30, 1, 1051232));
  allocs.push_back(Allocation(29, 0, 0));
  allocs.push_back(Allocation(31, 1, 1051232));
  allocs.push_back(Allocation(30, 0, 0));
  allocs.push_back(Allocation(32, 1, 1051232));
  allocs.push_back(Allocation(31, 0, 0));
  allocs.push_back(Allocation(33, 1, 1051232));
  allocs.push_back(Allocation(32, 0, 0));
  allocs.push_back(Allocation(34, 1, 1051232));
  allocs.push_back(Allocation(33, 0, 0));
  allocs.push_back(Allocation(27, 0, 0));
  allocs.push_back(Allocation(35, 1, 1051232));
  allocs.push_back(Allocation(36, 1, 1051232));
  allocs.push_back(Allocation(35, 0, 0));
  allocs.push_back(Allocation(37, 1, 1051232));
  allocs.push_back(Allocation(36, 0, 0));
  allocs.push_back(Allocation(38, 1, 1051232));
  allocs.push_back(Allocation(37, 0, 0));
  allocs.push_back(Allocation(39, 1, 1051232));
  allocs.push_back(Allocation(38, 0, 0));
  allocs.push_back(Allocation(40, 1, 1051232));
  allocs.push_back(Allocation(39, 0, 0));
  allocs.push_back(Allocation(41, 1, 1051232));
  allocs.push_back(Allocation(40, 0, 0));
  allocs.push_back(Allocation(34, 0, 0));
  allocs.push_back(Allocation(42, 1, 1051232));
  allocs.push_back(Allocation(43, 1, 1051232));
  allocs.push_back(Allocation(42, 0, 0));
  allocs.push_back(Allocation(44, 1, 1051232));
  allocs.push_back(Allocation(43, 0, 0));
  allocs.push_back(Allocation(45, 1, 1051232));
  allocs.push_back(Allocation(44, 0, 0));
  allocs.push_back(Allocation(46, 1, 1051232));
  allocs.push_back(Allocation(45, 0, 0));
  allocs.push_back(Allocation(47, 1, 1051232));
  allocs.push_back(Allocation(46, 0, 0));
  allocs.push_back(Allocation(48, 1, 1051232));
  allocs.push_back(Allocation(47, 0, 0));
  allocs.push_back(Allocation(41, 0, 0));
  allocs.push_back(Allocation(49, 1, 1051232));
  allocs.push_back(Allocation(50, 1, 1051232));
  allocs.push_back(Allocation(49, 0, 0));
  allocs.push_back(Allocation(51, 1, 1051232));
  allocs.push_back(Allocation(50, 0, 0));
  allocs.push_back(Allocation(52, 1, 1051232));
  allocs.push_back(Allocation(51, 0, 0));
  allocs.push_back(Allocation(53, 1, 1051232));
  allocs.push_back(Allocation(52, 0, 0));
  allocs.push_back(Allocation(54, 1, 1051232));
  allocs.push_back(Allocation(53, 0, 0));
  allocs.push_back(Allocation(55, 1, 1051232));
  allocs.push_back(Allocation(54, 0, 0));
  allocs.push_back(Allocation(48, 0, 0));
  allocs.push_back(Allocation(56, 1, 1051232));
  allocs.push_back(Allocation(57, 1, 1051232));
  allocs.push_back(Allocation(56, 0, 0));
  allocs.push_back(Allocation(58, 1, 1051232));
  allocs.push_back(Allocation(57, 0, 0));
  allocs.push_back(Allocation(59, 1, 1051232));
  allocs.push_back(Allocation(58, 0, 0));
  allocs.push_back(Allocation(60, 1, 1051232));
  allocs.push_back(Allocation(59, 0, 0));
  allocs.push_back(Allocation(61, 1, 1051232));
  allocs.push_back(Allocation(60, 0, 0));
  allocs.push_back(Allocation(62, 1, 1051232));
  allocs.push_back(Allocation(61, 0, 0));
  allocs.push_back(Allocation(55, 0, 0));
  allocs.push_back(Allocation(63, 1, 1051232));
  allocs.push_back(Allocation(64, 1, 1051232));
  allocs.push_back(Allocation(63, 0, 0));
  allocs.push_back(Allocation(65, 1, 1051232));
  allocs.push_back(Allocation(64, 0, 0));
  allocs.push_back(Allocation(66, 1, 1051232));
  allocs.push_back(Allocation(65, 0, 0));
  allocs.push_back(Allocation(67, 1, 1051232));
  allocs.push_back(Allocation(66, 0, 0));
  allocs.push_back(Allocation(68, 1, 1051232));
  allocs.push_back(Allocation(67, 0, 0));
  allocs.push_back(Allocation(69, 1, 1051232));
  allocs.push_back(Allocation(68, 0, 0));
  allocs.push_back(Allocation(62, 0, 0));
  allocs.push_back(Allocation(70, 1, 1051232));
  allocs.push_back(Allocation(71, 1, 1051232));
  allocs.push_back(Allocation(70, 0, 0));
  allocs.push_back(Allocation(72, 1, 1051232));
  allocs.push_back(Allocation(71, 0, 0));
  allocs.push_back(Allocation(73, 1, 1051232));
  allocs.push_back(Allocation(72, 0, 0));
  allocs.push_back(Allocation(74, 1, 1051232));
  allocs.push_back(Allocation(73, 0, 0));
  allocs.push_back(Allocation(75, 1, 1051232));
  allocs.push_back(Allocation(74, 0, 0));
  allocs.push_back(Allocation(76, 1, 1051232));
  allocs.push_back(Allocation(75, 0, 0));
  allocs.push_back(Allocation(69, 0, 0));
  allocs.push_back(Allocation(77, 1, 409600));
  allocs.push_back(Allocation(78, 1, 1051232));
  allocs.push_back(Allocation(76, 0, 0));
  allocs.push_back(Allocation(79, 1, 1051232));
  allocs.push_back(Allocation(78, 0, 0));
  allocs.push_back(Allocation(80, 1, 1051232));
  allocs.push_back(Allocation(79, 0, 0));
  allocs.push_back(Allocation(81, 1, 1478656));
  allocs.push_back(Allocation(80, 0, 0));
  allocs.push_back(Allocation(82, 1, 409600));
  allocs.push_back(Allocation(81, 0, 0));
  allocs.push_back(Allocation(77, 0, 0));
  allocs.push_back(Allocation(83, 1, 409600));
  allocs.push_back(Allocation(82, 0, 0));
  allocs.push_back(Allocation(84, 1, 614400));
  allocs.push_back(Allocation(83, 0, 0));
  allocs.push_back(Allocation(85, 1, 614400));
  allocs.push_back(Allocation(84, 0, 0));
  allocs.push_back(Allocation(86, 1, 819200));
  allocs.push_back(Allocation(85, 0, 0));
  allocs.push_back(Allocation(87, 1, 81920));
  allocs.push_back(Allocation(86, 0, 0));
  allocs.push_back(Allocation(88, 1, 81920));
  allocs.push_back(Allocation(88, 0, 0));
  allocs.push_back(Allocation(89, 1, 8192));
  allocs.push_back(Allocation(87, 0, 0));
  allocs.push_back(Allocation(90, 1, 8192));
  allocs.push_back(Allocation(90, 0, 0));
  allocs.push_back(Allocation(91, 1, 4000));
  allocs.push_back(Allocation(89, 0, 0));
  allocs.push_back(Allocation(91, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 27659520);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}

/// Test memory allocation for model yolo_v2_tiny.onnx.
TEST(MemAlloc, testAllocateAllForModel79) {
  MemoryAllocator MA("mem", 0, 64);
  std::list<Allocation> allocs;
  allocs.push_back(Allocation(1, 1, 2076672));
  allocs.push_back(Allocation(2, 1, 2076672));
  allocs.push_back(Allocation(1, 0, 0));
  allocs.push_back(Allocation(3, 1, 11075584));
  allocs.push_back(Allocation(2, 0, 0));
  allocs.push_back(Allocation(4, 1, 2768896));
  allocs.push_back(Allocation(3, 0, 0));
  allocs.push_back(Allocation(5, 1, 5537792));
  allocs.push_back(Allocation(4, 0, 0));
  allocs.push_back(Allocation(6, 1, 1384448));
  allocs.push_back(Allocation(5, 0, 0));
  allocs.push_back(Allocation(7, 1, 2768896));
  allocs.push_back(Allocation(6, 0, 0));
  allocs.push_back(Allocation(8, 1, 692224));
  allocs.push_back(Allocation(7, 0, 0));
  allocs.push_back(Allocation(9, 1, 1384448));
  allocs.push_back(Allocation(8, 0, 0));
  allocs.push_back(Allocation(10, 1, 346112));
  allocs.push_back(Allocation(9, 0, 0));
  allocs.push_back(Allocation(11, 1, 692224));
  allocs.push_back(Allocation(10, 0, 0));
  allocs.push_back(Allocation(12, 1, 173056));
  allocs.push_back(Allocation(11, 0, 0));
  allocs.push_back(Allocation(13, 1, 346112));
  allocs.push_back(Allocation(12, 0, 0));
  allocs.push_back(Allocation(14, 1, 346112));
  allocs.push_back(Allocation(13, 0, 0));
  allocs.push_back(Allocation(15, 1, 692224));
  allocs.push_back(Allocation(14, 0, 0));
  allocs.push_back(Allocation(16, 1, 692224));
  allocs.push_back(Allocation(15, 0, 0));
  allocs.push_back(Allocation(17, 1, 84500));
  allocs.push_back(Allocation(16, 0, 0));
  allocs.push_back(Allocation(17, 0, 0));
  uint64_t usedSize = MA.allocateAll(allocs);
  EXPECT_EQ(usedSize, 13844480);
  for (const auto &alloc : allocs) {
    if (alloc.alloc_) {
      EXPECT_EQ(MA.getSize(alloc.handle_), alignedSize(alloc.size_, 64));
    }
  };
  EXPECT_FLOAT_EQ(MA.getAllocationEfficiency(), 1.000000);
}
